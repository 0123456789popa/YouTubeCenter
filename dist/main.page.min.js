!function(){eval("/**\n * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that \"directory\" and not name of the baseName's\n                //module. For instance, baseName of \"one/two/three\", maps to\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\n                //this normalization.\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                name = baseParts.concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\n//# sourceURL=/../vendor/almond.js"),define("../vendor/almond",function(){}),eval('define(\'utils\',[],function(){\r\n  function each(obj, callback) {\r\n    if (isArray(obj)) {\r\n      for (var i = 0; i < obj.length; i++) {\r\n        if (callback(i, obj[i]) === true) break;\r\n      }\r\n    } else {\r\n      for (var key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n          if (callback(key, obj[key]) === true) break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  function isArray(arr) {\r\n    return Object.prototype.toString.call(arr) === "[object Array]";\r\n  }\r\n  \r\n  function bind(scope, func) {\r\n    var args = Array.prototype.slice.call(arguments, 2);\r\n    return function(){\r\n      return func.apply(scope, args.concat(Array.prototype.slice.call(arguments)))\r\n    };\r\n  }\r\n  function trimLeft(obj){\r\n    return obj.replace(/^\\s+/, "");\r\n  }\r\n  function trimRight(obj){\r\n    return obj.replace(/\\s+$/, "");\r\n  }\r\n  function map(obj, callback, thisArg) {\r\n    for (var i = 0, n = obj.length, a = []; i < n; i++) {\r\n        if (i in obj) a[i] = callback.call(thisArg, obj[i]);\r\n    }\r\n    return a;\r\n  }\r\n  \r\n  function defineLockedProperty(obj, key, setter, getter) {\r\n    if (typeof obj !== "object") obj = {};\r\n    if (ie || typeof Object.defineProperty === "function") {\r\n      Object.defineProperty(obj, key, {\r\n        get: getter,\r\n        set: setter\r\n      });\r\n      return obj;\r\n    } else {\r\n      obj.__defineGetter__(key, getter);\r\n      obj.__defineSetter__(key, setter);\r\n      return obj;\r\n    }\r\n  }\r\n  \r\n  function addEventListener(elm, event, callback, useCapture) {\r\n    if (elm.addEventListener) {\r\n      elm.addEventListener(event, callback, useCapture || false);\r\n    } else if (elm.attachEvent) {\r\n      elm.attachEvent("on" + event, callback);\r\n    }\r\n  }\r\n  \r\n  function removeEventListener(elm, event, callback, useCapture) {\r\n    if (elm.removeEventListener) {\r\n      elm.removeEventListener(event, callback, useCapture || false);\r\n    } else if (elm.detachEvent) {\r\n      elm.detachEvent("on" + event, callback);\r\n    }\r\n  }\r\n  \r\n  var ie = (function(){\r\n    for (var v = 3, el = document.createElement(\'b\'), all = el.all || []; el.innerHTML = \'<!--[if gt IE \' + (++v) + \']><i><![endif]-->\', all[0];);\r\n    return v > 4 ? v : !!document.documentMode;\r\n  }());\r\n  \r\n  var now = Date.now || function () {\r\n    return +new Date;\r\n  };\r\n  \r\n  /* Cookies */\r\n  function setCookie(name, value, domain, path, expires) {\r\n    domain = domain ? ";domain=" + encodeURIComponent(domain) : "";\r\n    path = path ? ";path=" + encodeURIComponent(path) : "";\r\n    expires = 0 > expires ? "" : 0 == expires ? ";expires=" + (new Date(1970, 1, 1)).toUTCString() : ";expires=" + (new Date(now() + 1E3 * expires)).toUTCString();\r\n    \r\n    document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + domain + path + expires;\r\n  }\r\n  \r\n  function getCookie(key) {\r\n    return getCookies()[key];\r\n  }\r\n  \r\n  function getCookies() {\r\n    var c = document.cookie, v = 0, cookies = {};\r\n    if (document.cookie.match(/^\\s*\\$Version=(?:"1"|1);\\s*(.*)/)) {\r\n        c = RegExp.$1;\r\n        v = 1;\r\n    }\r\n    if (v === 0) {\r\n        map(c.split(/[,;]/), function(cookie) {\r\n            var parts = cookie.split(/=/, 2),\r\n                name = decodeURIComponent(trimLeft(parts[0])),\r\n                value = parts.length > 1 ? decodeURIComponent(trimRight(parts[1])) : null;\r\n            cookies[name] = value;\r\n        });\r\n    } else {\r\n        map(c.match(/(?:^|\\s+)([!#$%&\'*+\\-.0-9A-Z^`a-z|~]+)=([!#$%&\'*+\\-.0-9A-Z^`a-z|~]*|"(?:[\\x20-\\x7E\\x80\\xFF]|\\\\[\\x00-\\x7F])*")(?=\\s*[,;]|$)/g), function($0, $1) {\r\n            var name = $0,\r\n                value = $1.charAt(0) === \'"\'\r\n                          ? $1.substr(1, -1).replace(/\\\\(.)/g, "$1")\r\n                          : $1;\r\n            cookies[name] = value;\r\n        });\r\n    }\r\n    return cookies;\r\n  }\r\n  \r\n  return {\r\n    each: each,\r\n    isArray: isArray,\r\n    bind: bind,\r\n    defineLockedProperty: defineLockedProperty,\r\n    ie: ie,\r\n    addEventListener: addEventListener,\r\n    removeEventListener: removeEventListener,\r\n    now: now,\r\n    trimLeft: trimLeft,\r\n    trimRight: trimRight,\r\n    map: map,\r\n    setCookie: setCookie,\r\n    getCookie: getCookie,\r\n    getCookies: getCookies\r\n  };\r\n});\n//# sourceURL=/utils.js'),eval('define(\'windowReadyEvent\',["utils"], function(utils){\r\n  function addEventListener(event, callback) {\r\n    if (!listeners.hasOwnProperty(event)) {\r\n      listeners[event] = [];\r\n    }\r\n    listeners[event].push(callback);\r\n    \r\n    // Make sure the added event listener is executed!\r\n    var readyState = pageStates.indexOf(document.readyState);\r\n    if (readyState <= lastState) {\r\n      callback();\r\n    }\r\n  }\r\n  \r\n  function removeEventListener(event, callback) {\r\n    if (!listeners.hasOwnProperty(event)) {\r\n      return;\r\n    }\r\n    var l = listeners[event];\r\n    for (var i = 0, len = l.length; i < len; i++) {\r\n      if (l[i] === callback) {\r\n        l[i].splice(i, 1);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  \r\n  function update() {\r\n    var readyState = pageStates.indexOf(document.readyState);\r\n    utils.each(listeners, function(key, val){\r\n      var eventState = pageStates.indexOf(key);\r\n      if (lastState < eventState < readyState) {\r\n        for (var i = 0, len = val.length; i < len; i++) {\r\n          val[i]();\r\n        }\r\n      }\r\n    });\r\n    lastState = readyState;\r\n  }\r\n  \r\n  function init() {\r\n    utils.addEventListener(document, "readystatechange", update, true);\r\n    utils.addEventListener(document, "DOMContentLoaded", update, true);\r\n    update();\r\n  }\r\n  \r\n  var listeners = {};\r\n  var pageStates = ["uninitialized", "loading", "interactive", "complete"];\r\n  var lastState = -1;\r\n  \r\n  init();\r\n  \r\n  return {\r\n    addEventListener: addEventListener,\r\n    removeEventListener: removeEventListener\r\n  };\r\n});\n//# sourceURL=/windowReadyEvent.js'),eval("define('unsafeWindow',[], function(){\r\n  return window;\r\n});\n//# sourceURL=/unsafeWindow.js"),eval('define(\'player/api\',["unsafeWindow", "utils"], function(unsafeWindow, utils){\r\n  function getAPI() {\r\n    if (!apiCache) {\r\n      apiCache = bindPlayerAPI();\r\n    }\r\n    return apiCache;\r\n  }\r\n  function setAPI(api) {\r\n    apiCache = api;\r\n  }\r\n  function bindPlayerAPI() {\r\n    var player = document.getElementById("movie_player");\r\n    var api = {};\r\n    \r\n    if (player && player.getApiInterface) {\r\n      var apiInterface = player.getApiInterface();\r\n      for (var i = 0, len = apiInterface.length; i < len; i++) {\r\n        api[apiInterface[i]] = utils.bind(player, player[apiInterface[i]]);\r\n      }\r\n    }\r\n    return api;\r\n  }\r\n  \r\n  var apiCache = null;\r\n  \r\n  return {\r\n    getAPI: getAPI,\r\n    setAPI: setAPI\r\n  };\r\n});\n//# sourceURL=/player/api.js'),eval('define(\'console\',["utils"], function(utils){\r\n  function setEnabled(b) {\r\n    enabled = b;\r\n  }\r\n  \r\n  function log() {\r\n    if (!enabled) return function(){};\r\n    return console.log.bind(console);\r\n  }\r\n  \r\n  function error() {\r\n    if (!enabled) return function(){};\r\n    return console.error.bind(console);\r\n  }\r\n  \r\n  function warn() {\r\n    if (!enabled) return function(){};\r\n    return console.warn.bind(console);\r\n  }\r\n  \r\n  var enabled = true;\r\n  \r\n  var retObj = {};\r\n  utils.defineLockedProperty(retObj, "log", function(){}, log);\r\n  utils.defineLockedProperty(retObj, "error", function(){}, error);\r\n  utils.defineLockedProperty(retObj, "warn", function(){}, warn);\r\n  \r\n  return retObj;\r\n});\n//# sourceURL=/console.js'),eval('define(\'player/config\',["utils", "unsafeWindow", "console"], function(utils, uw, con){\r\n  function getConfig() {\r\n    return config;\r\n  }\r\n  \r\n  function setConfig(cfg) {\r\n    con.log("[Player/Config] setConfig", cfg);\r\n    config = cfg;\r\n  }\r\n  \r\n  function configSetter(cfg) {\r\n    setConfig(JSON.parse(JSON.stringify(cfg))); // Let\'s clone it\r\n    merge(cfg, persistentConfig);\r\n  }\r\n  \r\n  function configGetter() {\r\n    var cfg = getConfig();\r\n    if (!cfg) return cfg;\r\n    cfg = JSON.parse(JSON.stringify(cfg));\r\n    merge(cfg, persistentConfig);\r\n    return cfg;\r\n  }\r\n  \r\n  function setPersistentConfig(cfg) {\r\n    persistentConfig = cfg;\r\n  }\r\n  \r\n  function getPersistentConfig() {\r\n    return persistentConfig;\r\n  }\r\n  \r\n  function merge(cfg, persistent) {\r\n    utils.each(persistent, function(key, value){\r\n      if (typeof persistent === "object") {\r\n        if (!(key in cfg)) {\r\n          cfg[key] = JSON.parse(JSON.stringify(value));\r\n        } else {\r\n          merge(cfg[key], persistent[key]);\r\n        }\r\n      } else {\r\n        cfg[key] = value;\r\n      }\r\n    });\r\n    return cfg;\r\n  }\r\n  \r\n  var config = {};\r\n  var persistentConfig = {};\r\n  \r\n  // Make sure that ytplayer variable is set\r\n  uw.ytplayer = uw.ytplayer || {};\r\n  \r\n  config = uw.ytplayer.config || {};\r\n  \r\n  utils.defineLockedProperty(uw.ytplayer, "config", configSetter, configGetter);\r\n  \r\n  return {\r\n    getConfig: getConfig,\r\n    setConfig: setConfig,\r\n    setPersistentConfig: setPersistentConfig,\r\n    getPersistentConfig: getPersistentConfig\r\n  };\r\n});\n//# sourceURL=/player/config.js'),eval("define('unsafeYouTubeCenter',[\"unsafeWindow\"], function(uw){\r\n  var ytcenter = {};\r\n  ytcenter.player = {};\r\n  \r\n  uw.ytcenter = ytcenter;\r\n  \r\n  return ytcenter;\r\n});\n//# sourceURL=/unsafeYouTubeCenter.js"),eval('define(\'player/onYouTubePlayerReady\',["unsafeWindow", "player/api", "player/config", "utils", "unsafeYouTubeCenter"], function(uw, playerAPI, config, utils, uytc){\r\n  function onPlayerReady(api) {\r\n    playerAPI.setAPI(api);\r\n    \r\n    if (typeof api === "object") {\r\n      for (var i = 0, len = listeners.length; i < len; i++) {\r\n        listeners[i].apply(null, arguments);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function addListener(callback) {\r\n    listeners.push(callback);\r\n  }\r\n  \r\n  function removeListener(callback) {\r\n    for (var i = 0, len = listeners.length; i < len; i++) {\r\n      if (listeners[i] === callback) {\r\n        listeners.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  var listeners = [];\r\n  \r\n  var persistentConfig = config.getPersistentConfig();\r\n  persistentConfig.args = persistentConfig.args || {};\r\n  persistentConfig.args.jsapicallback = "ytcenter.player.onReady";\r\n  \r\n  \r\n  uytc.player.onReady = utils.bind(this, onPlayerReady)\r\n  \r\n  return {\r\n    addListener: addListener,\r\n    removeListener: removeListener\r\n  };\r\n});\n//# sourceURL=/player/onYouTubePlayerReady.js'),eval('define(\'player/listeners\',["utils", "player/api", "unsafeWindow", "console", "player/onYouTubePlayerReady"], function(utils, playerAPI, uw, con, onReady){\r\n  // Get the YouTube listener for the passed event.\r\n  function getYouTubeListener(event) {\r\n    var ytEvent = "ytPlayer" + event + "player" + playerId;\r\n    return ytListeners[ytEvent];\r\n  }\r\n  \r\n  // The latest player id registered in the global window.\r\n  function getNewestPlayerId() {\r\n    var id = 1, i;\r\n    utils.each(uw, function(key, value){\r\n      if (key.indexOf("ytPlayer") !== -1) {\r\n        i = parseInt(key.match(/player([0-9]+)$/)[1]);\r\n        if (i > id) {\r\n          id = i;\r\n        }\r\n      }\r\n    });\r\n    return id;\r\n  }\r\n  \r\n  function ytListenerContainerSetter(event, func) {\r\n    var ytEvent = "ytPlayer" + event + "player" + playerId;\r\n    ytListeners[ytEvent] = func;\r\n  }\r\n  function ytListenerContainerGetter(event, func) {\r\n    return utils.bind(null, callListener, event, 1);\r\n  }\r\n  \r\n  /* Origin argument\r\n   * If origin is equal to 0 then the origin is directly from the player (only YouTube Center\'s listeners get executed if override is false).\r\n   * If origin is equal to 1 then the origin is from the global listeners (both YouTube\'s and YouTube Center\'s listeners get executed).\r\n   */\r\n  function callListener(event, origin) {\r\n    function generateThisObject() {\r\n      return {\r\n        getOriginalListener: utils.bind(null, getYouTubeListener, event)\r\n      };\r\n    }\r\n    \r\n    var ytEvent = "ytPlayer" + event + "player" + playerId;\r\n    var args = Array.prototype.slice.call(arguments, 2);\r\n    var returnVal = null;\r\n    \r\n    if (enabled && origin === 0 && (!events.hasOwnProperty(event) || (events.hasOwnProperty(event) && !events[event].override))) {\r\n      /* Override is false and the origin is from the player; call the YouTube Center listeners */\r\n      if (events.hasOwnProperty(event)) {\r\n        for (var i = 0, len = events[event].listeners.length; i < len; i++) {\r\n          returnVal = events[event].listeners[i].apply(null, args);\r\n        }\r\n      }\r\n    } else if (enabled && origin === 1) {\r\n      if (events.hasOwnProperty(event) && events[event].override) {\r\n        /* Override is true and the origin is from the global window; call the YouTube Center listeners */\r\n        for (var i = 0, len = events[event].listeners.length; i < len; i++) {\r\n          events[event].listeners[i].apply(generateThisObject(), args);\r\n        }\r\n        con.log("[Player Listener] Event " + event + " was called with", args);\r\n      } else if (ytListeners[ytEvent]) {\r\n        if (apiNotAvailable) {\r\n          /* API is not available therefore call YouTube Center listeners as YouTube listener is called  */\r\n          for (var i = 0, len = events[event].listeners.length; i < len; i++) {\r\n            returnVal = events[event].listeners[i].apply(null, args);\r\n          }\r\n        }\r\n        \r\n        /* Override is false and the origin is from the global window; call the YouTube listener */\r\n        returnVal = ytListeners[ytEvent].apply(uw, args);\r\n        \r\n        con.log("[Player Listener] Event " + event + " was called with", args);\r\n      }\r\n    } else if (!enabled) {\r\n      /* Everything is disabled; call the YouTube listener */\r\n      returnVal = ytListeners[ytEvent].apply(uw, args);\r\n    }\r\n    return returnVal;\r\n  }\r\n  \r\n  function addPlayerListener() {\r\n    var api = playerAPI.getAPI();\r\n    var event;\r\n    \r\n    if (api && api.addEventListener) {\r\n      apiNotAvailable = false;\r\n      for (event in events) {\r\n        if (events.hasOwnProperty(event)) {\r\n          playerListener[event] = utils.bind(null, callListener, event, 0);\r\n          api.addEventListener(event, playerListener[event]);\r\n        }\r\n      }\r\n    } else {\r\n      apiNotAvailable = true;\r\n      con.error("[Player Listener] Player API is not available!");\r\n    }\r\n  }\r\n  \r\n  function initGlobalListeners() {\r\n    if (globalListenersInitialized) return; // Make sure that this function is only called once.\r\n    globalListenersInitialized = true;\r\n    for (var event in events) {\r\n      if (events.hasOwnProperty(event)) {\r\n        var ytEvent = "ytPlayer" + event + "player" + playerId;\r\n        if (uw[ytEvent]) {\r\n          ytListeners[ytEvent] = uw[ytEvent];\r\n        }\r\n        utils.defineLockedProperty(uw, ytEvent,\r\n          utils.bind(null, ytListenerContainerSetter, event),\r\n          utils.bind(null, ytListenerContainerGetter, event)\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n  function init() {\r\n    if (enabled) return;\r\n    con.log("[Player Listener] Has begun the init...");\r\n    var api = playerAPI.getAPI();\r\n    playerId = getNewestPlayerId();\r\n    \r\n    enabled = true; // Indicate that the it\'s active.\r\n\r\n    // Add the listeners normally to the player\r\n    addPlayerListener();\r\n    \r\n    // Replace the global listeners with custom listeners in case the override property is set to true\r\n    initGlobalListeners();\r\n  }\r\n  \r\n  function addEventListener(event, listener) {\r\n    if (!events.hasOwnProperty(event)) return;\r\n    \r\n    removeEventListener(event, listener); // Make sure that there is only one instance of the listener registered.\r\n    events[event].listeners.push(listener);\r\n  }\r\n      \r\n  function removeEventListener(event, listener) {\r\n    if (!events.hasOwnProperty(event)) return;\r\n    for (var i = 0, len = events[event].listeners.length; i < len; i++) {\r\n      if (events[event].listeners[i] === listener) {\r\n        return events[event].listeners.splice(i, 1);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function setOverride(event, override) {\r\n    if (!events.hasOwnProperty(event)) return;\r\n    events[event].override = !!override;\r\n  }\r\n  \r\n  function unloadPlayerListeners() {\r\n    var api = playerAPI.getAPI();\r\n    var event;\r\n    \r\n    if (api && api.removeEventListener) {\r\n      for (event in events) {\r\n        if (events.hasOwnProperty(event)) {\r\n          api.removeEventListener(event, playerListener[event]);\r\n          delete playerListener[event];\r\n        }\r\n      }\r\n    } else {\r\n      con.error("[Player Listener] Player API is not available!");\r\n    }\r\n  }\r\n  \r\n  function unload() {\r\n    unloadPlayerListeners();\r\n    enabled = false;\r\n    apiNotAvailable = true;\r\n  }\r\n  \r\n  var playerId = 1;\r\n  var ytListeners = {};\r\n  var playerListener = {}; // Reference for unload\r\n  var enabled = false;\r\n  var globalListenersInitialized = false;\r\n  var apiNotAvailable = true;\r\n  \r\n  var events = {\r\n    "onApiChange": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "onCueRangeEnter": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "onCueRangeExit": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "onError": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "onNavigate": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "onPlaybackQualityChange": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "onStateChange": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "onTabOrderChange": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "onVolumeChange": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "onAdStart": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "onReady": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "RATE_SENTIMENT": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "SHARE_CLICKED": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "SIZE_CLICKED": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "WATCH_LATER": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "AdvertiserVideoView": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "captionschanged": {\r\n      override: false,\r\n      listeners: []\r\n    },\r\n    "onRemoteReceiverSelected": {\r\n      override: false,\r\n      listeners: []\r\n    }\r\n  };\r\n  \r\n  onReady.addListener(init);\r\n  \r\n  return {\r\n    addEventListener: addEventListener,\r\n    removeEventListener: removeEventListener,\r\n    setOverride: setOverride,\r\n    init: init,\r\n    unload: unload\r\n  };\r\n});\n//# sourceURL=/player/listeners.js'),eval('define(\'support\',[], function(){\r\n  function localStorageTest() {\r\n    var mod = "support.test";\r\n    try {\r\n      localStorage.setItem(mod, mod);\r\n      localStorage.removeItem(mod);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  return {\r\n    localStorage: localStorageTest(),\r\n    Greasemonkey: (typeof GM_setValue !== "undefined" && (typeof GM_setValue.toString === "undefined" || GM_setValue.toString().indexOf("not supported") === -1))\r\n  };\r\n});\n//# sourceURL=/support.js'),eval("define('storage/localStorage',[\"utils\"], function(utils){\r\n  return {\r\n    setItem: utils.bind(localStorage, localStorage.setItem),\r\n    getItem: utils.bind(localStorage, localStorage.getItem),\r\n    removeItem: utils.bind(localStorage, localStorage.removeItem)\r\n  };\r\n});\n//# sourceURL=/storage/localStorage.js"),eval('define(\'storage/cookies\',["utils"], function(utils){\r\n  function setItem(key, value) {\r\n    utils.setCookie(prefix + key, value, null, "/", 1000*24*60*60*1000);\r\n  }\r\n  \r\n  function getItem(key) {\r\n    return getCookie(prefix + key);\r\n  }\r\n  \r\n  function removeItem(key) {\r\n    utils.setCookie(prefix + key, "", null, "/", 0);\r\n  }\r\n  \r\n  var prefix = "ytcenter.";\r\n  \r\n  return {\r\n    setItem: setItem,\r\n    getItem: getItem,\r\n    removeItem: removeItem\r\n  };\r\n});\n//# sourceURL=/storage/cookies.js'),eval('define(\'storage/browser\',["support", "storage/localStorage", "storage/cookies"], function(support, localStorage, cookies){\r\n  if (support.localStorage) {\r\n    return localStorage;\r\n  } else {\r\n    return cookies;\r\n  }\r\n});\n//# sourceURL=/storage/browser.js'),eval('define(\'storage/userscript\',["support", "storage/browser"], function(support, sBrowser){\r\n  function setItem(key, value) {\r\n    //GM_setValue(key, value);\r\n  }\r\n  \r\n  function getItem(key) {\r\n    //return GM_getValue(key);\r\n  }\r\n  \r\n  function removeItem(key) {\r\n    //GM_deleteValue(key);\r\n  }\r\n  \r\n  if (support.Greasemonkey) {\r\n    return {\r\n      setItem: setItem,\r\n      removeItem: removeItem,\r\n      getItem: getItem\r\n    };\r\n  } else {\r\n    return sBrowser;\r\n  }\r\n});\n//# sourceURL=/storage/userscript.js'),eval("define('storage',[\"storage/userscript\"], function(storageHandler){\r\n  function setItem(key, value) {\r\n    cache[key] = value;\r\n    storageHandler.setItem(key, value);\r\n  }\r\n  \r\n  function removeItem(key) {\r\n    delete cache[key];\r\n    storageHandler.removeItem(key);\r\n  }\r\n  \r\n  function getItem(key) {\r\n    if (!(key in cache)) {\r\n      cache[key] = storageHandler.getItem(key);\r\n    }\r\n    return cache[key];\r\n  }\r\n  \r\n  var cache = {};\r\n  \r\n  \r\n  return {\r\n    setItem: setItem,\r\n    removeItem: removeItem,\r\n    getItem: getItem\r\n  };\r\n});\n//# sourceURL=/storage.js"),eval('require.config({\r\n  waitSeconds: 0\r\n});\r\n\r\ndefine(\'main.page\',["windowReadyEvent", "player/listeners", "console", "storage", "unsafeWindow", "player/onYouTubePlayerReady", "player/config"], function(windowReadyEvent, playerListener, con, storage, unsafeWindow, onReady, config){\r\n  onReady.addListener(function(api){\r\n    con.log("Player is ready", api);\r\n  });\r\n\r\n  playerListener.setOverride("onStateChange", true);\r\n  playerListener.addEventListener("onStateChange", function(state){\r\n    con.log("State has been changed to " + state + ".");\r\n  });\r\n});\n//# sourceURL=/main.page.js'),require(["main.page"])
}();
//# sourceMappingURL=main.page.min.js.map