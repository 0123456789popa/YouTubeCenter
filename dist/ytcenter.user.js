// ==UserScript==
// @id              YouTubeCenter
// @name            YouTube Center
// @namespace       http://www.facebook.com/YouTubeCenter
// @version         3.0.0
// @author          Jeppe Rune Mortensen <jepperm@gmail.com>
// @description     YouTube Center contains all kind of different useful functions which makes your visit on YouTube much more entertaining.
// @icon            https://raw.github.com/YePpHa/YouTubeCenter/master/assets/logo-48x48.png
// @icon64          https://raw.github.com/YePpHa/YouTubeCenter/master/assets/logo-64x64.png
// @domain          yeppha.github.io
// @domain          youtube.com
// @domain          www.youtube.com
// @domain          gdata.youtube.com
// @domain          apis.google.com
// @domain          plus.googleapis.com
// @domain          googleapis.com
// @domain          raw.github.com
// @domain          raw2.github.com
// @domain          s.ytimg.com
// @match           http://*.youtube.com/*
// @match           https://*.youtube.com/*
// @match           https://yeppha.github.io/downloads/YouTubeCenter.meta.js
// @match           http://s.ytimg.com/yts/jsbin/*
// @match           https://s.ytimg.com/yts/jsbin/*
// @match           https://raw.github.com/YePpHa/YouTubeCenter/master/*
// @match           http://apis.google.com/*/widget/render/comments?*
// @match           https://apis.google.com/*/widget/render/comments?*
// @match           http://plus.googleapis.com/*/widget/render/comments?*
// @match           https://plus.googleapis.com/*/widget/render/comments?*
// @include         http://*.youtube.com/*
// @include         https://*.youtube.com/*
// @include         http://apis.google.com/*/widget/render/comments?*
// @include         https://apis.google.com/*/widget/render/comments?*
// @include         http://plus.googleapis.com/*/widget/render/comments?*
// @include         https://plus.googleapis.com/*/widget/render/comments?*
// @exclude         http://apiblog.youtube.com/*
// @exclude         https://apiblog.youtube.com/*
// @exclude         http://*.youtube.com/subscribe_embed?*
// @exclude         https://*.youtube.com/subscribe_embed?*
// @grant           GM_getValue
// @grant           GM_setValue
// @grant           GM_deleteValue
// @grant           GM_xmlhttpRequest
// @grant           GM_log
// @grant           GM_registerMenuCommand
// @grant           unsafeWindow
// @updateURL       https://github.com/YePpHa/YouTubeCenter/raw/master/dist/YouTubeCenter.meta.js
// @downloadURL     https://github.com/YePpHa/YouTubeCenter/raw/master/dist/YouTubeCenter.user.js
// @updateVersion   1
// @run-at          document-start
// @priority        9001
// @contributionURL https://github.com/YePpHa/YouTubeCenter/wiki/Donate
// ==/UserScript==

(function(){
function mainPage(UserProxy_token, UserProxy_functions, globalSettings, consoleSessionToken) {
(function () {eval("/**\r\n * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/jrburke/almond for details\r\n */\r\n//Going sloppy to avoid \'use strict\' string cost, but strict practices should\r\n//be followed.\r\n/*jslint sloppy: true */\r\n/*global setTimeout: false */\r\n\r\nvar requirejs, require, define;\r\n(function (undef) {\r\n    var main, req, makeMap, handlers,\r\n        defined = {},\r\n        waiting = {},\r\n        config = {},\r\n        defining = {},\r\n        hasOwn = Object.prototype.hasOwnProperty,\r\n        aps = [].slice,\r\n        jsSuffixRegExp = /\\.js$/;\r\n\r\n    function hasProp(obj, prop) {\r\n        return hasOwn.call(obj, prop);\r\n    }\r\n\r\n    /**\r\n     * Given a relative module name, like ./something, normalize it to\r\n     * a real name that can be mapped to a path.\r\n     * @param {String} name the relative name\r\n     * @param {String} baseName a real name that the name arg is relative\r\n     * to.\r\n     * @returns {String} normalized name\r\n     */\r\n    function normalize(name, baseName) {\r\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\r\n            foundI, foundStarMap, starI, i, j, part,\r\n            baseParts = baseName && baseName.split(\"/\"),\r\n            map = config.map,\r\n            starMap = (map && map[\'*\']) || {};\r\n\r\n        //Adjust any relative paths.\r\n        if (name && name.charAt(0) === \".\") {\r\n            //If have a base name, try to normalize against it,\r\n            //otherwise, assume it is a top-level require that will\r\n            //be relative to baseUrl in the end.\r\n            if (baseName) {\r\n                //Convert baseName to array, and lop off the last part,\r\n                //so that . matches that \"directory\" and not name of the baseName\'s\r\n                //module. For instance, baseName of \"one/two/three\", maps to\r\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\r\n                //this normalization.\r\n                baseParts = baseParts.slice(0, baseParts.length - 1);\r\n                name = name.split(\'/\');\r\n                lastIndex = name.length - 1;\r\n\r\n                // Node .js allowance:\r\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\r\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, \'\');\r\n                }\r\n\r\n                name = baseParts.concat(name);\r\n\r\n                //start trimDots\r\n                for (i = 0; i < name.length; i += 1) {\r\n                    part = name[i];\r\n                    if (part === \".\") {\r\n                        name.splice(i, 1);\r\n                        i -= 1;\r\n                    } else if (part === \"..\") {\r\n                        if (i === 1 && (name[2] === \'..\' || name[0] === \'..\')) {\r\n                            //End of the line. Keep at least one non-dot\r\n                            //path segment at the front so it can be mapped\r\n                            //correctly to disk. Otherwise, there is likely\r\n                            //no path mapping for a path starting with \'..\'.\r\n                            //This can still fail, but catches the most reasonable\r\n                            //uses of ..\r\n                            break;\r\n                        } else if (i > 0) {\r\n                            name.splice(i - 1, 2);\r\n                            i -= 2;\r\n                        }\r\n                    }\r\n                }\r\n                //end trimDots\r\n\r\n                name = name.join(\"/\");\r\n            } else if (name.indexOf(\'./\') === 0) {\r\n                // No baseName, so this is ID is resolved relative\r\n                // to baseUrl, pull off the leading dot.\r\n                name = name.substring(2);\r\n            }\r\n        }\r\n\r\n        //Apply map config if available.\r\n        if ((baseParts || starMap) && map) {\r\n            nameParts = name.split(\'/\');\r\n\r\n            for (i = nameParts.length; i > 0; i -= 1) {\r\n                nameSegment = nameParts.slice(0, i).join(\"/\");\r\n\r\n                if (baseParts) {\r\n                    //Find the longest baseName segment match in the config.\r\n                    //So, do joins on the biggest to smallest lengths of baseParts.\r\n                    for (j = baseParts.length; j > 0; j -= 1) {\r\n                        mapValue = map[baseParts.slice(0, j).join(\'/\')];\r\n\r\n                        //baseName segment has  config, find if it has one for\r\n                        //this name.\r\n                        if (mapValue) {\r\n                            mapValue = mapValue[nameSegment];\r\n                            if (mapValue) {\r\n                                //Match, update name to the new value.\r\n                                foundMap = mapValue;\r\n                                foundI = i;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (foundMap) {\r\n                    break;\r\n                }\r\n\r\n                //Check for a star map match, but just hold on to it,\r\n                //if there is a shorter segment match later in a matching\r\n                //config, then favor over this star map.\r\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\r\n                    foundStarMap = starMap[nameSegment];\r\n                    starI = i;\r\n                }\r\n            }\r\n\r\n            if (!foundMap && foundStarMap) {\r\n                foundMap = foundStarMap;\r\n                foundI = starI;\r\n            }\r\n\r\n            if (foundMap) {\r\n                nameParts.splice(0, foundI, foundMap);\r\n                name = nameParts.join(\'/\');\r\n            }\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    function makeRequire(relName, forceSync) {\r\n        return function () {\r\n            //A version of a require function that passes a moduleName\r\n            //value for items that may need to\r\n            //look up paths relative to the moduleName\r\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\r\n        };\r\n    }\r\n\r\n    function makeNormalize(relName) {\r\n        return function (name) {\r\n            return normalize(name, relName);\r\n        };\r\n    }\r\n\r\n    function makeLoad(depName) {\r\n        return function (value) {\r\n            defined[depName] = value;\r\n        };\r\n    }\r\n\r\n    function callDep(name) {\r\n        if (hasProp(waiting, name)) {\r\n            var args = waiting[name];\r\n            delete waiting[name];\r\n            defining[name] = true;\r\n            main.apply(undef, args);\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\r\n            throw new Error(\'No \' + name);\r\n        }\r\n        return defined[name];\r\n    }\r\n\r\n    //Turns a plugin!resource to [plugin, resource]\r\n    //with the plugin being undefined if the name\r\n    //did not have a plugin prefix.\r\n    function splitPrefix(name) {\r\n        var prefix,\r\n            index = name ? name.indexOf(\'!\') : -1;\r\n        if (index > -1) {\r\n            prefix = name.substring(0, index);\r\n            name = name.substring(index + 1, name.length);\r\n        }\r\n        return [prefix, name];\r\n    }\r\n\r\n    /**\r\n     * Makes a name map, normalizing the name, and using a plugin\r\n     * for normalization if necessary. Grabs a ref to plugin\r\n     * too, as an optimization.\r\n     */\r\n    makeMap = function (name, relName) {\r\n        var plugin,\r\n            parts = splitPrefix(name),\r\n            prefix = parts[0];\r\n\r\n        name = parts[1];\r\n\r\n        if (prefix) {\r\n            prefix = normalize(prefix, relName);\r\n            plugin = callDep(prefix);\r\n        }\r\n\r\n        //Normalize according\r\n        if (prefix) {\r\n            if (plugin && plugin.normalize) {\r\n                name = plugin.normalize(name, makeNormalize(relName));\r\n            } else {\r\n                name = normalize(name, relName);\r\n            }\r\n        } else {\r\n            name = normalize(name, relName);\r\n            parts = splitPrefix(name);\r\n            prefix = parts[0];\r\n            name = parts[1];\r\n            if (prefix) {\r\n                plugin = callDep(prefix);\r\n            }\r\n        }\r\n\r\n        //Using ridiculous property names for space reasons\r\n        return {\r\n            f: prefix ? prefix + \'!\' + name : name, //fullName\r\n            n: name,\r\n            pr: prefix,\r\n            p: plugin\r\n        };\r\n    };\r\n\r\n    function makeConfig(name) {\r\n        return function () {\r\n            return (config && config.config && config.config[name]) || {};\r\n        };\r\n    }\r\n\r\n    handlers = {\r\n        require: function (name) {\r\n            return makeRequire(name);\r\n        },\r\n        exports: function (name) {\r\n            var e = defined[name];\r\n            if (typeof e !== \'undefined\') {\r\n                return e;\r\n            } else {\r\n                return (defined[name] = {});\r\n            }\r\n        },\r\n        module: function (name) {\r\n            return {\r\n                id: name,\r\n                uri: \'\',\r\n                exports: defined[name],\r\n                config: makeConfig(name)\r\n            };\r\n        }\r\n    };\r\n\r\n    main = function (name, deps, callback, relName) {\r\n        var cjsModule, depName, ret, map, i,\r\n            args = [],\r\n            callbackType = typeof callback,\r\n            usingExports;\r\n\r\n        //Use name if no relName\r\n        relName = relName || name;\r\n\r\n        //Call the callback to define the module, if necessary.\r\n        if (callbackType === \'undefined\' || callbackType === \'function\') {\r\n            //Pull out the defined dependencies and pass the ordered\r\n            //values to the callback.\r\n            //Default to [require, exports, module] if no deps\r\n            deps = !deps.length && callback.length ? [\'require\', \'exports\', \'module\'] : deps;\r\n            for (i = 0; i < deps.length; i += 1) {\r\n                map = makeMap(deps[i], relName);\r\n                depName = map.f;\r\n\r\n                //Fast path CommonJS standard dependencies.\r\n                if (depName === \"require\") {\r\n                    args[i] = handlers.require(name);\r\n                } else if (depName === \"exports\") {\r\n                    //CommonJS module spec 1.1\r\n                    args[i] = handlers.exports(name);\r\n                    usingExports = true;\r\n                } else if (depName === \"module\") {\r\n                    //CommonJS module spec 1.1\r\n                    cjsModule = args[i] = handlers.module(name);\r\n                } else if (hasProp(defined, depName) ||\r\n                           hasProp(waiting, depName) ||\r\n                           hasProp(defining, depName)) {\r\n                    args[i] = callDep(depName);\r\n                } else if (map.p) {\r\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\r\n                    args[i] = defined[depName];\r\n                } else {\r\n                    throw new Error(name + \' missing \' + depName);\r\n                }\r\n            }\r\n\r\n            ret = callback ? callback.apply(defined[name], args) : undefined;\r\n\r\n            if (name) {\r\n                //If setting exports via \"module\" is in play,\r\n                //favor that over return value and exports. After that,\r\n                //favor a non-undefined return value over exports use.\r\n                if (cjsModule && cjsModule.exports !== undef &&\r\n                        cjsModule.exports !== defined[name]) {\r\n                    defined[name] = cjsModule.exports;\r\n                } else if (ret !== undef || !usingExports) {\r\n                    //Use the return value from the function.\r\n                    defined[name] = ret;\r\n                }\r\n            }\r\n        } else if (name) {\r\n            //May just be an object definition for the module. Only\r\n            //worry about defining if have a module name.\r\n            defined[name] = callback;\r\n        }\r\n    };\r\n\r\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\r\n        if (typeof deps === \"string\") {\r\n            if (handlers[deps]) {\r\n                //callback in this case is really relName\r\n                return handlers[deps](callback);\r\n            }\r\n            //Just return the module wanted. In this scenario, the\r\n            //deps arg is the module name, and second arg (if passed)\r\n            //is just the relName.\r\n            //Normalize module name, if it contains . or ..\r\n            return callDep(makeMap(deps, callback).f);\r\n        } else if (!deps.splice) {\r\n            //deps is a config object, not an array.\r\n            config = deps;\r\n            if (config.deps) {\r\n                req(config.deps, config.callback);\r\n            }\r\n            if (!callback) {\r\n                return;\r\n            }\r\n\r\n            if (callback.splice) {\r\n                //callback is an array, which means it is a dependency list.\r\n                //Adjust args if there are dependencies\r\n                deps = callback;\r\n                callback = relName;\r\n                relName = null;\r\n            } else {\r\n                deps = undef;\r\n            }\r\n        }\r\n\r\n        //Support require([\'a\'])\r\n        callback = callback || function () {};\r\n\r\n        //If relName is a function, it is an errback handler,\r\n        //so remove it.\r\n        if (typeof relName === \'function\') {\r\n            relName = forceSync;\r\n            forceSync = alt;\r\n        }\r\n\r\n        //Simulate async callback;\r\n        if (forceSync) {\r\n            main(undef, deps, callback, relName);\r\n        } else {\r\n            //Using a non-zero value because of concern for what old browsers\r\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\r\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\r\n            //If want a value immediately, use require(\'id\') instead -- something\r\n            //that works in almond on the global level, but not guaranteed and\r\n            //unlikely to work in other AMD implementations.\r\n            setTimeout(function () {\r\n                main(undef, deps, callback, relName);\r\n            }, 4);\r\n        }\r\n\r\n        return req;\r\n    };\r\n\r\n    /**\r\n     * Just drops the config on the floor, but returns req in case\r\n     * the config return value is used.\r\n     */\r\n    req.config = function (cfg) {\r\n        return req(cfg);\r\n    };\r\n\r\n    /**\r\n     * Expose module registry for debugging and tooling\r\n     */\r\n    requirejs._defined = defined;\r\n\r\n    define = function (name, deps, callback) {\r\n\r\n        //This module may not have dependencies\r\n        if (!deps.splice) {\r\n            //deps is not an array, so probably means\r\n            //an object literal or factory function for\r\n            //the value. Adjust args.\r\n            callback = deps;\r\n            deps = [];\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\r\n            waiting[name] = [name, deps, callback];\r\n        }\r\n    };\r\n\r\n    define.amd = {\r\n        jQuery: true\r\n    };\r\n}());\r\n\n//# sourceURL=/../vendor/almond.js");

define("../vendor/almond", function(){});

eval("define(\'unsafeWindow\',[], function(){\r\n  return window;\r\n});\n//# sourceURL=/unsafeWindow.js");

eval("/**\r\n* A helper class to help checking for features that are supported by the browser.\r\n* @namespace helper\r\n* @class Support\r\n**/\r\ndefine(\'helper/support\',[\"exports\", \"unsafeWindow\"], function(exports, uw){\r\n  /**\r\n  * Performing a simple LocalStorage set, get test.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method localStorageTest\r\n  * @return {Boolean} Returns true if LocalStorage is supported otherwise returns false.\r\n  **/\r\n  function localStorageTest() {\r\n    var mod = \"support.test\";\r\n    try {\r\n      localStorage.setItem(mod, mod);\r\n      localStorage.removeItem(mod);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Checking if `webkitURL` is an object.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property isWebkitURL\r\n  * @type Boolean\r\n  **/\r\n  var isWebkitURL = typeof uw.webkitURL === \"object\";\r\n  \r\n  /**\r\n  * Checking if `URL` is an object.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property isURL\r\n  * @type Boolean\r\n  **/\r\n  var isURL = typeof uw.URL === \"object\";\r\n  \r\n  /**\r\n  * Checking if Maxthon runtime is accessible.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property maxthonRuntime\r\n  * @type Boolean\r\n  **/\r\n  var maxthonRuntime = window && window.external && window.external.mxGetRuntime && typeof window.external.mxGetRuntime === \"function\";\r\n  \r\n  /**\r\n  * Checking if `createObjectURL` is supported.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property isCreateObjectURL\r\n  * @type Boolean\r\n  **/\r\n  var isCreateObjectURL = false;\r\n  \r\n  /**\r\n  * Checking if `revokeObjectURL` is supported.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property isRevokeObjectURL\r\n  * @type Boolean\r\n  **/\r\n  var isRevokeObjectURL = false;\r\n  if (isWebkitURL) {\r\n    isCreateObjectURL = typeof uw.webkitURL.createObjectURL === \"function\";\r\n    isRevokeObjectURL = typeof uw.webkitURL.revokeObjectURL === \"function\";\r\n  } else if (isURL) {\r\n    isCreateObjectURL = typeof uw.URL.createObjectURL === \"function\";\r\n    isRevokeObjectURL = typeof uw.URL.revokeObjectURL === \"function\";\r\n  }\r\n  \r\n  /**\r\n  * Checking if LocalStorage is supported.\r\n  *\r\n  * @static\r\n  * @property localStorage\r\n  * @type Boolean\r\n  **/\r\n  exports.localStorage = localStorageTest();\r\n  \r\n  /**\r\n  * Checking if the Greasemonkey API is supported.\r\n  *\r\n  * @static\r\n  * @property Greasemonkey\r\n  * @type Boolean\r\n  **/\r\n  exports.Greasemonkey = (typeof GM_setValue !== \"undefined\" && (typeof GM_setValue.toString === \"undefined\" || GM_setValue.toString().indexOf(\"not supported\") === -1));\r\n  \r\n  /**\r\n  * Checking if `createObjectUR` is supported.\r\n  *\r\n  * @static\r\n  * @property createObjectURL\r\n  * @type Boolean\r\n  **/\r\n  exports.createObjectURL = isCreateObjectURL;\r\n  \r\n  /**\r\n  * Checking if `revokeObjectURL` is supported.\r\n  *\r\n  * @static\r\n  * @property revokeObjectURL\r\n  * @type Boolean\r\n  **/\r\n  exports.revokeObjectURL = isRevokeObjectURL;\r\n  \r\n  /**\r\n  * Checking if the `webkitURL` object is supported.\r\n  *\r\n  * @static\r\n  * @property webkitURL\r\n  * @type Boolean\r\n  **/\r\n  exports.webkitURL = isWebkitURL;\r\n  \r\n  /**\r\n  * Checking if the `URL` object is supported.\r\n  *\r\n  * @static\r\n  * @property URL\r\n  * @type Boolean\r\n  **/\r\n  exports.URL = isURL;\r\n  \r\n  /**\r\n  * Checking if Maxthon runtime is supported.\r\n  *\r\n  * @static\r\n  * @property maxthonRuntime\r\n  * @type Boolean\r\n  **/\r\n  exports.maxthonRuntime = maxthonRuntime;\r\n  \r\n  /**\r\n  * Checking if Maxthon runtime Storage object is supported.\r\n  *\r\n  * @static\r\n  * @property maxthonRuntimeStorage\r\n  * @type Boolean\r\n  **/\r\n  exports.maxthonRuntimeStorage = maxthonRuntime && window.external.mxGetRuntime() && window.external.mxGetRuntime().storage;\r\n  \r\n  /**\r\n  * Checking if Firefox extension port is accessible.\r\n  *\r\n  * @static\r\n  * @property firefoxPort\r\n  * @type Boolean\r\n  **/\r\n  exports.firefoxPort = this.port && typeof this.port.request === \"function\" && this.port.storage && typeof this.port.on === \"function\";\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/helper/support.js");

eval("/**\r\n* @class Utils\r\n**/\r\ndefine(\'utils\',[\"exports\", \"./helper/support\", \"unsafeWindow\"], function(exports, support, uw){\r\n  function each(obj, callback) {\r\n    if (isArray(obj)) {\r\n      for (var i = 0; i < obj.length; i++) {\r\n        if (callback(i, obj[i]) === true) break;\r\n      }\r\n    } else {\r\n      for (var key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n          if (callback(key, obj[key]) === true) break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  function isArray(arr) {\r\n    return Object.prototype.toString.call(arr) === \"[object Array]\";\r\n  }\r\n  \r\n  function asyncCall(scope, callback) {\r\n    return setTimeout(bind.apply(null, [scope, callback].concat(Array.prototype.slice.call(arguments, 2))), 0);\r\n  }\r\n  \r\n  function bind(scope, func) {\r\n    var args = Array.prototype.slice.call(arguments, 2);\r\n    return function(){\r\n      return func.apply(scope, args.concat(Array.prototype.slice.call(arguments)))\r\n    };\r\n  }\r\n  \r\n  function trimLeft(obj){\r\n    return obj.replace(/^\\s+/, \"\");\r\n  }\r\n  \r\n  function trimRight(obj){\r\n    return obj.replace(/\\s+$/, \"\");\r\n  }\r\n  \r\n  function map(obj, callback, thisArg) {\r\n    for (var i = 0, n = obj.length, a = []; i < n; i++) {\r\n      if (i in obj) a[i] = callback.call(thisArg, obj[i]);\r\n    }\r\n    return a;\r\n  }\r\n  \r\n  /**\r\n  * Define a property with a getter and a setter.\r\n  *\r\n  * @method defineProperty\r\n  * @param {Object} obj The object where the property resides in.\r\n  * @param {String} key The name of the property.\r\n  * @param {Function} get The getter function.\r\n  * @param {Function} set The setter function.\r\n  **/\r\n  function defineProperty(obj, key, get, set) {\r\n    if (Object && typeof Object.defineProperty === \"function\") {\r\n      Object.defineProperty(obj, key, {\r\n        \"get\": get,\r\n        \"set\": set\r\n      });\r\n    } else {\r\n      obj.__defineGetter__(key, get);\r\n      obj.__defineSetter__(key, set);\r\n    }\r\n  }\r\n  \r\n  function defineLockedProperty(obj, key, setter, getter) {\r\n    if (typeof obj !== \"object\") obj = {};\r\n    if (support.ie || typeof Object.defineProperty === \"function\") {\r\n      Object.defineProperty(obj, key, {\r\n        get: getter,\r\n        set: setter\r\n      });\r\n      return obj;\r\n    } else {\r\n      obj.__defineGetter__(key, getter);\r\n      obj.__defineSetter__(key, setter);\r\n      return obj;\r\n    }\r\n  }\r\n  \r\n  function addEventListener(elm, event, callback, useCapture) {\r\n    if (elm.addEventListener) {\r\n      elm.addEventListener(event, callback, useCapture || false);\r\n    } else if (elm.attachEvent) {\r\n      elm.attachEvent(\"on\" + event, callback);\r\n    }\r\n  }\r\n  \r\n  function removeEventListener(elm, event, callback, useCapture) {\r\n    if (elm.removeEventListener) {\r\n      elm.removeEventListener(event, callback, useCapture || false);\r\n    } else if (elm.detachEvent) {\r\n      elm.detachEvent(\"on\" + event, callback);\r\n    }\r\n  }\r\n  \r\n  var now = Date.now || function () {\r\n    return +new Date;\r\n  };\r\n  \r\n  /* Cookies */\r\n  function setCookie(name, value, domain, path, expires) {\r\n    domain = domain ? \";domain=\" + encodeURIComponent(domain) : \"\";\r\n    path = path ? \";path=\" + encodeURIComponent(path) : \"\";\r\n    expires = 0 > expires ? \"\" : 0 == expires ? \";expires=\" + (new Date(1970, 1, 1)).toUTCString() : \";expires=\" + (new Date(now() + 1E3 * expires)).toUTCString();\r\n    \r\n    document.cookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value) + domain + path + expires;\r\n  }\r\n  \r\n  function getCookie(key) {\r\n    return getCookies()[key];\r\n  }\r\n  \r\n  function getCookies() {\r\n    var c = document.cookie, v = 0, cookies = {};\r\n    if (document.cookie.match(/^\\s*\\$Version=(?:\"1\"|1);\\s*(.*)/)) {\r\n      c = RegExp.$1;\r\n      v = 1;\r\n    }\r\n    if (v === 0) {\r\n      map(c.split(/[,;]/), function(cookie) {\r\n        var parts = cookie.split(/=/, 2),\r\n            name = decodeURIComponent(trimLeft(parts[0])),\r\n            value = parts.length > 1 ? decodeURIComponent(trimRight(parts[1])) : null;\r\n        cookies[name] = value;\r\n      });\r\n    } else {\r\n      map(c.match(/(?:^|\\s+)([!#$%&\'*+\\-.0-9A-Z^`a-z|~]+)=([!#$%&\'*+\\-.0-9A-Z^`a-z|~]*|\"(?:[\\x20-\\x7E\\x80\\xFF]|\\\\[\\x00-\\x7F])*\")(?=\\s*[,;]|$)/g), function($0, $1) {\r\n        var name = $0, value = $1.charAt(0) === \'\"\' ? $1.substr(1, -1).replace(/\\\\(.)/g, \"$1\") : $1;\r\n        cookies[name] = value;\r\n      });\r\n    }\r\n    return cookies;\r\n  }\r\n  \r\n  function endsWith(str, suffix) {\r\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n  }\r\n  \r\n  function inject(func) {\r\n    var script = document.createElement(\"script\"),\r\n        p = (document.body || document.head || document.documentElement);\r\n    if (!p) {\r\n      throw \"Could not inject!!!\";\r\n    }\r\n    script.setAttribute(\"type\", \"text/javascript\");\r\n    script.appendChild(document.createTextNode(\"(\" + func + \")(\" + buildArgumentList.apply(null, [false].concat(Array.prototype.slice.call(arguments, 1))) + \");\"));\r\n    p.appendChild(script);\r\n    p.removeChild(script);\r\n  }\r\n  \r\n  function buildArgumentList(wrap) {\r\n    var list = [];\r\n    var args = Array.prototype.slice.call(arguments, 1);\r\n    \r\n    for (var i = 0, len = args.length; i < len; i++) {\r\n      if (typeof args[i] === \"string\") {\r\n        list.push(\"\\\"\" + args[i].replace(/\\\\/, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"\");\r\n      } else if (typeof args[i] === \"object\") {\r\n        list.push(JSON.stringify(args[i]));\r\n      } else if (typeof args[i] === \"undefined\") {\r\n        list.push(\"null\");\r\n      } else {\r\n        list.push(args[i]);\r\n      }\r\n    }\r\n    if (wrap) {\r\n      return \"(\" + list.join(\",\") + \")\";\r\n    } else {\r\n      return list.join(\",\");\r\n    }\r\n  }\r\n  \r\n  function isJSONString(json) {\r\n    try {\r\n      JSON.parse(json);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  function xhr(details) {\r\n    var xmlhttp;\r\n    if (typeof XMLHttpRequest !== \"undefined\") {\r\n      xmlhttp = new XMLHttpRequest();\r\n    } else if (typeof opera !== \"undefined\" && typeof opera.XMLHttpRequest !== \"undefined\") {\r\n      xmlhttp = new opera.XMLHttpRequest();\r\n    } else {\r\n      if (details[\"onerror\"]) {\r\n        details[\"onerror\"]();\r\n      }\r\n      \r\n      return;\r\n    }\r\n    xmlhttp.onreadystatechange = function(){\r\n      var responseState = {\r\n        responseXML:(xmlhttp.readyState == 4 ? xmlhttp.responseXML : \'\'),\r\n        responseText:(xmlhttp.readyState == 4 ? xmlhttp.responseText : \'\'),\r\n        readyState:xmlhttp.readyState,\r\n        responseHeaders:(xmlhttp.readyState == 4 ? xmlhttp.getAllResponseHeaders() : \'\'),\r\n        status:(xmlhttp.readyState == 4 ? xmlhttp.status : 0),\r\n        statusText:(xmlhttp.readyState == 4 ? xmlhttp.statusText : \'\'),\r\n        finalUrl:(xmlhttp.readyState == 4 ? xmlhttp.finalUrl : \'\')\r\n      };\r\n      if (details[\"onreadystatechange\"]) {\r\n        details[\"onreadystatechange\"](responseState);\r\n      }\r\n      if (xmlhttp.readyState == 4) {\r\n        if (details[\"onload\"] && xmlhttp.status >= 200 && xmlhttp.status < 300) {\r\n          details[\"onload\"](responseState);\r\n        }\r\n        if (details[\"onerror\"] && (xmlhttp.status < 200 || xmlhttp.status >= 300)) {\r\n          details[\"onerror\"](responseState);\r\n        }\r\n      }\r\n    };\r\n    try {\r\n      xmlhttp.open(details.method, details.url);\r\n    } catch(e) {\r\n      if(details[\"onerror\"]) {\r\n        details[\"onerror\"]({responseXML:\'\',responseText:\'\',readyState:4,responseHeaders:\'\',status:403,statusText:\'Forbidden\'});\r\n      }\r\n      return;\r\n    }\r\n    if (details.headers) {\r\n      for (var prop in details.headers) {\r\n        xmlhttp.setRequestHeader(prop, details.headers[prop]);\r\n      }\r\n    }\r\n    xmlhttp.send((typeof(details.data) != \'undefined\') ? details.data : null);\r\n  }\r\n  \r\n  // Used for the message module (should probably move to another place)\r\n  // It replaces a property in the obj to a predefined function, where the arguments will be callbackId, target, referer\r\n  function bindFunctionCallbacks(obj, func, target, referer) {\r\n    for (key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        if (typeof obj[key] === \"obj\") {\r\n          bindFunctionCallbacks(obj[key]);\r\n        } else if (typeof obj[key] === \"string\") {\r\n          if (obj[key].indexOf(\"@/(message.callback)/\") === 0) {\r\n            var callbackId = obj[key].split(\"@/(message.callback)/\")[1];\r\n            obj[key] = bind(null, func, callbackId, target, referer);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  function extend(obj, defaults, deep) {\r\n    if (typeof obj !== \"object\") throw new TypeError(\"Unsupported type for obj.\");\r\n    if (typeof defaults !== \"object\") throw new TypeError(\"Unsupported type for defaults.\");\r\n    \r\n    for (var key in defaults) {\r\n      if (defaults.hasOwnProperty(key)) {\r\n        if (typeof obj[key] === \"object\" && typeof defaults[key] === \"object\" && deep) {\r\n          extend(obj[key], defaults[key], deep);\r\n        } else if (!obj.hasOwnProperty(key)) {\r\n          obj[key] = defaults[key];\r\n        }\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n  \r\n  function inArray(key, arr) {\r\n    for (var i = 0, len = arr.length; i < len; i++) {\r\n      if (arr[i] === key) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  function listClasses(el) {\r\n    if (!el || !el.className) return [];\r\n    return el.className.split(\" \");\r\n  }\r\n  \r\n  function addClass(el, className) {\r\n    var classes = listClasses(el);\r\n    var addList = className.split(\" \");\r\n    \r\n    for (var i = 0, len = addList.length; i < len; i++) {\r\n      if (!inArray(addList[i], classes)) {\r\n        el.className += \" \" + addList[i];\r\n      }\r\n    }\r\n    return el.className;\r\n  }\r\n  \r\n  function removeClass(el, className) {\r\n    var classes = listClasses(el);\r\n    var removeList = className.split(\" \");\r\n    \r\n    var buffer = [];\r\n    for (var i = 0, len = classes.length; i < len; i++) {\r\n      if (!inArray(classes[i], removeList)) {\r\n        buffer.push(classes[i]);\r\n      }\r\n    }\r\n    return el.className = buffer.join(\" \");\r\n  }\r\n  \r\n  function hasClass(el, className) {\r\n    return inArray(className, listClasses(el));\r\n  }\r\n  \r\n  function throttle(func, delay, options){\r\n    function timeout() {\r\n      previous = options.leading === false ? 0 : new Date;\r\n      timer = null;\r\n      result = func.apply(context, args);\r\n    }\r\n    var context, args, result, timer = null, previous = 0;\r\n    options = options || {};\r\n    return function(){\r\n      var now = new Date, dt;\r\n      \r\n      context = this;\r\n      args = arguments;\r\n      \r\n      if (!previous && options.leading === false) previous = now;\r\n      dt = delay - (now - previous);\r\n      \r\n      if (dt <= 0) {\r\n        clearTimeout(timer);\r\n        timer = null;\r\n        previous = now;\r\n        result = func.apply(context, args);\r\n      } else if (!timer && options.trailing !== false) {\r\n        timer = setTimeout(timeout, dt);\r\n      }\r\n      return result;\r\n    };\r\n  }\r\n  \r\n  function clone(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n  }\r\n  \r\n  function removeDuplicates(arr) {\r\n    var uniqueArr = [];\r\n    for (var i = 0, len = arr.length; i < len; i++) {\r\n      if (!inArray(uniqueArr, arr[i])) {\r\n        uniqueArr.push(arr[i]);\r\n      }\r\n    }\r\n    \r\n    return uniqueArr;\r\n  }\r\n  \r\n  function escapeRegExp(str) {\r\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\r\n  }\r\n  \r\n  function toBlob(bytes, contentType) {\r\n    contentType = contentType || \"text/plain\";\r\n    var sliceSize = 512;\r\n    \r\n    var bytesLength = bytes.length;\r\n    var slicesCount = Math.ceil(bytesLength / sliceSize);\r\n    \r\n    var byteArrays = new Array(slicesCount);\r\n    \r\n    for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\r\n      var begin = sliceIndex * sliceSize;\r\n      var end = Math.min(begin + sliceSize, bytesLength);\r\n      \r\n      var sliceBytes = new Array(end - begin);\r\n      for (var offset = begin, i = 0 ; offset < end; ++i, ++offset) {\r\n        sliceBytes[i] = bytes[offset].charCodeAt(0);\r\n      }\r\n      byteArrays[sliceIndex] = new Uint8Array(sliceBytes);\r\n    }\r\n    \r\n    return new Blob(byteArrays, { type: contentType });\r\n  }\r\n  \r\n  function createObjectURL(blob) {\r\n    if (support.createObjectURL) {\r\n      if (support.webkitURL) {\r\n        return uw.webkitURL.createObjectURL(blob);\r\n      } else {\r\n        return uw.URL.createObjectURL(blob);\r\n      }\r\n    } else {\r\n      throw \"createObjectURL is not supported by the browser!\";\r\n    }\r\n  }\r\n  \r\n  function revokeObjectURL(url) {\r\n    if (support.revokeObjectURL) {\r\n      if (support.webkitURL) {\r\n        return uw.webkitURL.revokeObjectURL(url);\r\n      } else {\r\n        return uw.URL.revokeObjectURL(url);\r\n      }\r\n    } else {\r\n      throw \"revokeObjectURL is not supported by the browser!\";\r\n    }\r\n  }\r\n  \r\n  // Returns a random number between min and max\r\n  function getRandomArbitrary(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n  }\r\n  \r\n  // Returns a random integer between min (included) and max (excluded)\r\n  function getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n  \r\n  // Returns a random string of characters of chars with the length of length\r\n  function generateToken(chars, length) {\r\n    if (typeof chars !== \"string\") chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_\";\r\n    if (typeof length !== \"number\") length = 64;\r\n    \r\n    var charsLength = chars.length;\r\n    \r\n    var token = \"\";\r\n    for (var i = 0; i < length; i++) {\r\n      token += chars[getRandomInt(0, charsLength)];\r\n    }\r\n    \r\n    return token;\r\n  }\r\n  \r\n  function escapeECMAVariable(key, defaultKey) {\r\n    key = key.replace(/[^0-9a-zA-Z_\\$]/g, \"\");\r\n    while (/$[0-9]/g.test(key) && key.length > 0) {\r\n      if (key === \"\") return defaultKey;\r\n      key = key.substring(1);\r\n    }\r\n    return key;\r\n  }\r\n  \r\n  function indexOfArray(value, arr) {\r\n    for (var i = 0, len = arr.length; i < len; i++) {\r\n      if (arr[i] === value) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n  \r\n  function getKeys(obj) {\r\n    var keys = [];\r\n    each(obj, function(key){\r\n      keys.push(key);\r\n    });\r\n    return keys;\r\n  }\r\n  \r\n  function setProperty(target, path, value, createPath) {\r\n    var tokens = path.split(\".\");\r\n    for (var i = 0, len = tokens.length - 1; i < len; i++) {\r\n      if (target[tokens[i]]) {\r\n        target = target[tokens[i]];\r\n      } else {\r\n        if (createPath) {\r\n          target[tokens[i]] = {};\r\n          target = target[tokens[i]];\r\n        } else {\r\n          throw \"Path \" + path + \" does not exist for\", target;\r\n        }\r\n      }\r\n    }\r\n    target[tokens[tokens.length - 1]] = value;\r\n  }\r\n  \r\n  /**\r\n  * Replaces each format item in a specified string with the text equivalent of a corresponding object\'s value.\r\n  *\r\n  * @static\r\n  * @method format\r\n  * @param {String} format A composite format string that includes one or more format items.\r\n  * @param {any} [args]* The object to format.\r\n  * @return {String} The string with each format item inserted.\r\n  **/\r\n  /**\r\n  * Replaces each token in a specified string with the text equivalent of a corresponding key\'s value.\r\n  *\r\n  * @static\r\n  * @method format\r\n  * @param {String} format A composite format string that includes one or more token items.\r\n  * @param {Object} map The key, value pairs that will be replacing the tokens.\r\n  * @return {String} The formatted string.\r\n  **/\r\n  function format(format) {\r\n    if (arguments.length === 2 && typeof arguments[1] === \"object\") {\r\n      var map = arguments[1];\r\n      return format.replace(/\\${([\\w\\-\\_]+)}/g, function(match, key) { \r\n        return typeof map[key] !== \"undefined\" ? map[key] : match;\r\n      });\r\n    } else {\r\n      var args = Array.prototype.slice.call(arguments, 1);\r\n      return format.replace(/{(\\d+)}/g, function(match, index) { \r\n        return typeof args[index] !== \"undefined\" ? args[index] : match;\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Calculate the absolute position of an element.\r\n  *\r\n  * @static\r\n  * @method getAbsolutePosition\r\n  * @param {HTMLElement} el The element.\r\n  * @return {Object} An object with the properties left and top\r\n  *                  where top and left tell the position of the\r\n  *                  element from the top-left corner in pixels.\r\n  **/\r\n  function getAbsolutePosition(el) {\r\n    var left = el.offsetLeft || 0;\r\n    var top = el.offsetTop || 0;\r\n    \r\n    if (el.offsetParent) {\r\n      var parentAbsolutePosition = getAbsolutePosition(el.offsetParent);\r\n      left += parentAbsolutePosition.left;\r\n      top += parentAbsolutePosition.top;\r\n    }\r\n    \r\n    return { left: left, top: top }; \r\n  }\r\n  \r\n  // Expose functions\r\n  exports.getAbsolutePosition = getAbsolutePosition;\r\n  exports.format = format;\r\n  exports.hasClass = hasClass;\r\n  exports.removeClass = removeClass;\r\n  exports.addClass = addClass;\r\n  exports.each = each;\r\n  exports.isArray = isArray;\r\n  exports.inArray = inArray;\r\n  exports.bind = bind;\r\n  exports.asyncCall = asyncCall;\r\n  exports.defineLockedProperty = defineLockedProperty;\r\n  exports.addEventListener = addEventListener;\r\n  exports.removeEventListener = removeEventListener;\r\n  exports.now = now;\r\n  exports.trimLeft = trimLeft;\r\n  exports.trimRight = trimRight;\r\n  exports.map = map;\r\n  exports.setCookie = setCookie;\r\n  exports.getCookie = getCookie;\r\n  exports.getCookies = getCookies;\r\n  exports.endsWith = endsWith;\r\n  exports.inject = inject;\r\n  exports.isJSONString = isJSONString;\r\n  exports.xhr = xhr;\r\n  exports.buildArgumentList = buildArgumentList;\r\n  exports.bindFunctionCallbacks = bindFunctionCallbacks;\r\n  exports.extend = extend;\r\n  exports.throttle = throttle;\r\n  exports.clone = clone;\r\n  exports.removeDuplicates = removeDuplicates;\r\n  exports.escapeRegExp = escapeRegExp;\r\n  exports.toBlob = toBlob;\r\n  exports.createObjectURL = createObjectURL;\r\n  exports.revokeObjectURL = revokeObjectURL;\r\n  exports.getRandomArbitrary = getRandomArbitrary;\r\n  exports.getRandomInt = getRandomInt;\r\n  exports.generateToken = generateToken;\r\n  exports.escapeECMAVariable = escapeECMAVariable;\r\n  exports.indexOfArray = indexOfArray;\r\n  exports.getKeys = getKeys;\r\n  exports.setProperty = setProperty;\r\n  exports.defineProperty = defineProperty;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/utils.js");

eval("/**\r\n* The player API\r\n*\r\n* @namespace Player\r\n* @class API\r\n**/\r\ndefine(\'player/api\',[\"exports\", \"utils\"], function(exports, utils){\r\n  /**\r\n  * Get the player API.\r\n  *\r\n  * @static\r\n  * @method getAPI\r\n  * @return {Object} The player API.\r\n  **/\r\n  function getAPI() {\r\n    if (!apiCache) {\r\n      apiCache = bindPlayerAPI();\r\n    }\r\n    return apiCache;\r\n  }\r\n  \r\n  /**\r\n  * Set the player API.\r\n  *\r\n  * @static\r\n  * @method setAPI\r\n  * @param {Object} api The player API.\r\n  **/\r\n  function setAPI(api) {\r\n    apiCache = api;\r\n  }\r\n  \r\n  /**\r\n  * Bind the player API from the #movie_player element\r\n  * into an object.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method bindPlayerAPI\r\n  * @return {Object} The player API.\r\n  **/\r\n  function bindPlayerAPI() {\r\n    var player = document.getElementById(\"movie_player\");\r\n    var api = {};\r\n    \r\n    if (player && player.getApiInterface) {\r\n      var apiInterface = player.getApiInterface();\r\n      for (var i = 0, len = apiInterface.length; i < len; i++) {\r\n        api[apiInterface[i]] = utils.bind(player, player[apiInterface[i]]);\r\n      }\r\n    }\r\n    return api;\r\n  }\r\n  \r\n  /**\r\n  * The cached player API.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property apiCache\r\n  * @type Object\r\n  **/\r\n  var apiCache = null;\r\n  \r\n  exports.getAPI = getAPI;\r\n  exports.setAPI = setAPI;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/player/api.js");

eval("define(\'console\',[\"exports\", \"utils\"], function(exports, utils){\r\n  function setEnabled(b) {\r\n    enabled = b;\r\n  }\r\n  \r\n  function log() {\r\n    if (!enabled) return function(){};\r\n    return console.log.bind(console, \"injected[\" + sessionToken + \"]\");\r\n  }\r\n  \r\n  function error() {\r\n    if (!enabled) return function(){};\r\n    return console.error.bind(console, \"injected[\" + sessionToken + \"]\");\r\n  }\r\n  \r\n  function warn() {\r\n    if (!enabled) return function(){};\r\n    return console.warn.bind(console, \"injected[\" + sessionToken + \"]\");\r\n  }\r\n  \r\n  function debug() {\r\n    if (!enabled) return function(){};\r\n    return console.debug.bind(console, \"injected[\" + sessionToken + \"]\");\r\n  }\r\n  \r\n  var sessionToken = (typeof consoleSessionToken === \"string\" ? consoleSessionToken : utils.generateToken(null, 8));\r\n  \r\n  var enabled = true;\r\n  \r\n  exports.sessionToken = sessionToken;\r\n  \r\n  utils.defineLockedProperty(exports, \"log\", function(){}, log);\r\n  utils.defineLockedProperty(exports, \"error\", function(){}, error);\r\n  utils.defineLockedProperty(exports, \"warn\", function(){}, warn);\r\n  utils.defineLockedProperty(exports, \"debug\", function(){}, debug);\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/console.js");

eval("/**\r\n* Handles the player configuration.\r\n*\r\n* @namespace Player\r\n* @class Config\r\n**/\r\ndefine(\'player/config\',[\"exports\", \"utils\", \"unsafeWindow\", \"console\"], function(exports, utils, uw, con){\r\n  /**\r\n  * Get the configuration for the player.\r\n  *\r\n  * @static\r\n  * @method getConfig\r\n  * @return {Object} The player configuration.\r\n  **/\r\n  function getConfig() {\r\n    return config;\r\n  }\r\n  \r\n  /**\r\n  * Set the configuration of the player.\r\n  *\r\n  * @static\r\n  * @method SetConfig\r\n  * @param {Object} cfg The configuration object.\r\n  **/\r\n  \r\n  /**\r\n  * Set a property for the configuration of the player.\r\n  *\r\n  * @static\r\n  * @method SetConfig\r\n  * @param {String} key The name of the property.\r\n  * @param {any} value The value of the property.\r\n  **/\r\n  function setConfig(cfg, value) {\r\n    if (typeof cfg === \"string\") {\r\n      utils.setProperty(config, cfg, value, true);\r\n    } else {\r\n      config = cfg;\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Set the persistent configuration of the player.\r\n  *\r\n  * @static\r\n  * @method setPersistentConfig\r\n  * @param {Object} cfg The configuration object.\r\n  **/\r\n  \r\n  /**\r\n  * Set a property for the persistent configuration of the player.\r\n  *\r\n  * @static\r\n  * @method setPersistentConfig\r\n  * @param {String} key The name of the property.\r\n  * @param {any} value The value of the property.\r\n  **/\r\n  function setPersistentConfig(cfg, value) {\r\n    if (typeof cfg === \"string\") {\r\n      utils.setProperty(persistentConfig, cfg, value, true);\r\n    } else {\r\n      persistentConfig = cfg;\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Get the persistent configuration for the player.\r\n  *\r\n  * @static\r\n  * @method getPersistentConfig\r\n  * @return {Object} The persistent player configuration.\r\n  **/\r\n  function getPersistentConfig() {\r\n    return persistentConfig;\r\n  }\r\n  \r\n  /**\r\n  * The config setter function for `uw.ytplayer`.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method configSetter\r\n  * @param {Object} cfg The configuration object.\r\n  **/\r\n  function configSetter(cfg) {\r\n    setConfig(cfg); // set the configuration. Keep the reference\r\n  }\r\n  \r\n  /**\r\n  * The config getter function for `uw.ytplayer`.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method configGetter\r\n  * @return {Object} Returns persistent config and the default config merged.\r\n  **/\r\n  function configGetter() {\r\n    var cfg = getConfig();\r\n    if (!cfg) return cfg;\r\n    cfg = utils.clone(cfg);\r\n    var persistentCfg = utils.clone(persistentConfig);\r\n    utils.extend(persistentCfg, cfg, true);\r\n    return persistentCfg;\r\n  }\r\n  \r\n  /**\r\n  * The configuration of the player.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property config\r\n  * @type Object\r\n  **/\r\n  var config = {};\r\n  \r\n  /**\r\n  * The persistent configuration of the player.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property persistentConfig\r\n  * @type Object\r\n  **/\r\n  var persistentConfig = {};\r\n  \r\n  // Make sure that ytplayer variable is set\r\n  uw.ytplayer = uw.ytplayer || {};\r\n  \r\n  config = uw.ytplayer.config || {};\r\n  \r\n  // Make sure that YouTube doesn\'t override the ytplayer variable or adding an unwanted property to ytplayer.\r\n  utils.defineLockedProperty(uw.ytplayer, \"config\", configSetter, configGetter);\r\n  \r\n  exports.getConfig = getConfig;\r\n  exports.setConfig = setConfig;\r\n  exports.setPersistentConfig = setPersistentConfig;\r\n  exports.getPersistentConfig = getPersistentConfig;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/player/config.js");

eval("define(\'unsafeYouTubeCenter\',[\"unsafeWindow\"], function(uw){\r\n  var ytcenter = {};\r\n  ytcenter.player = {};\r\n  \r\n  uw.ytcenter = ytcenter;\r\n  \r\n  return ytcenter;\r\n});\n//# sourceURL=/unsafeYouTubeCenter.js");

eval("define(\'player/onYouTubePlayerReady\',[\"exports\", \"unsafeWindow\", \"./api\", \"./config\", \"utils\", \"unsafeYouTubeCenter\", \"../console\"], function(exports, uw, playerAPI, config, utils, uytc, con){\r\n  function onPlayerReady(api) {\r\n    con.debug(\"Player is ready\");\r\n    playerAPI.setAPI(api);\r\n    \r\n    if (typeof api === \"object\") {\r\n      for (var i = 0, len = listeners.length; i < len; i++) {\r\n        listeners[i].apply(null, arguments);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function addListener(callback) {\r\n    listeners.push(callback);\r\n  }\r\n  \r\n  function removeListener(callback) {\r\n    for (var i = 0, len = listeners.length; i < len; i++) {\r\n      if (listeners[i] === callback) {\r\n        listeners.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  function onDelayed() {\r\n    con.debug(\"Using delayed method\");\r\n    var api = playerAPI.getAPI();\r\n    if (api && typeof api.getPlayerState === \"function\") {\r\n      try {\r\n        api.getPlayerState();\r\n      } catch (e) {\r\n        setTimeout(onDelayed, 500);\r\n        return;\r\n      }\r\n      onPlayerReady(api);\r\n    }\r\n  }\r\n  \r\n  var listeners = [];\r\n  \r\n  config.setPersistentConfig(\"args.jsapicallback\", \"ytcenter.player.onReady\");\r\n  uytc.player.onReady = utils.bind(this, onPlayerReady);\r\n  uw.onYouTubePlayerReady = onPlayerReady;\r\n  \r\n  var cfg = config.getConfig();\r\n  if (cfg.loaded) {\r\n    onDelayed();\r\n  }\r\n  \r\n  exports.addListener = addListener;\r\n  exports.removeListener = removeListener;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/player/onYouTubePlayerReady.js");

eval("define(\'pageload\',[\"utils\", \"console\"], function(utils, con){\r\n  function addEventListener(event, callback) {\r\n    if (!listeners.hasOwnProperty(event)) {\r\n      listeners[event] = [];\r\n    }\r\n    listeners[event].push(callback);\r\n    \r\n    // Make sure the added event listener is executed!\r\n    var readyState = pageStates.indexOf(event);\r\n    if (readyState <= lastState) {\r\n      callback();\r\n    }\r\n  }\r\n  \r\n  function removeEventListener(event, callback) {\r\n    if (!listeners.hasOwnProperty(event)) {\r\n      return;\r\n    }\r\n    var l = listeners[event];\r\n    for (var i = 0, len = l.length; i < len; i++) {\r\n      if (l[i] === callback) {\r\n        l[i].splice(i, 1);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  \r\n  function callListeners(event) {\r\n    var list = listeners[event];\r\n    for (var i = 0, len = list.length; i < len; i++) {\r\n      list[i]();\r\n    }\r\n  }\r\n  \r\n  function update() {\r\n    var readyState = pageStates.indexOf(document.readyState);\r\n    \r\n    for (var i = 0, len = pageStates.length; i < len; i++) {\r\n      if (lastState < i && i <= readyState && utils.isArray(listeners[pageStates[i]])) {\r\n        callListeners(pageStates[i]);\r\n      }\r\n    }\r\n    \r\n    lastState = readyState;\r\n  }\r\n  \r\n  function init() {\r\n    utils.addEventListener(document, \"readystatechange\", update, true);\r\n    utils.addEventListener(document, \"DOMContentLoaded\", update, true);\r\n    update();\r\n  }\r\n  \r\n  var listeners = {};\r\n  var pageStates = [\"uninitialized\", \"loading\", \"interactive\", \"complete\"];\r\n  var lastState = -1;\r\n  \r\n  init();\r\n  \r\n  return {\r\n    addEventListener: addEventListener,\r\n    removeEventListener: removeEventListener\r\n  };\r\n});\n//# sourceURL=/pageload.js");

eval("define(\'ytready\',[\"exports\", \"./pageload\", \"unsafeWindow\"], function(exports, pageload, uw){\r\n  function addEventListener(path, callback) {\r\n    if (!paths[path]) paths[path] = [];\r\n    paths[path].push(callback);\r\n    \r\n    update();\r\n  }\r\n  \r\n  function removeEventListener(path, callback) {\r\n    if (!paths[path]) return;\r\n    for (var i = 0, len = paths[path].length; i < len; i++) {\r\n      if (paths[path][i] === callback) {\r\n        paths[path].splice(i, 1);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Checks if the path in unsafeWindow is defined.\r\n  *\r\n  * @method propertyExists\r\n  * @param {String} path The path to the property.\r\n  * @return {Boolean} Returns true if the property exists otherwise false.\r\n  **/\r\n  function propertyExists(path) {\r\n    var tokens = path.split(\".\");\r\n    \r\n    var target = uw;\r\n    \r\n    for (var i = 0, len = tokens.length; i < len; i++) {\r\n      if (target[tokens[i]]) {\r\n        target = target[tokens[i]];\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * Checks if the added path listeners exist\r\n  * and if they do then call the callbacks\r\n  * for that specific path listener.\r\n  *\r\n  * @method update\r\n  **/\r\n  function update() {\r\n    for (var path in paths) {\r\n      if (paths[path]) {\r\n        if (propertyExists(path)) {\r\n          var callbacks = paths[path];\r\n          for (var i = 0, len = callbacks.length; i < len; i++) {\r\n            callbacks[i]();\r\n          }\r\n          paths[path] = null;\r\n        }\r\n      }\r\n    }\r\n    timerUpdate();\r\n  }\r\n  \r\n  function isWorking() {\r\n    for (var path in paths) {\r\n      if (paths[path]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  function timerUpdate() {\r\n    clearTimeout(timer);\r\n    if (isWorking()) {\r\n      setTimeout(update, timerInterval);\r\n    }\r\n  }\r\n  \r\n  var timerInterval = 1000;\r\n  \r\n  var timer = null;\r\n  var paths = { };\r\n  \r\n  // Attach the update to the page load.\r\n  pageload.addEventListener(\"uninitialized\", update);\r\n  pageload.addEventListener(\"loading\", update);\r\n  pageload.addEventListener(\"interactive\", update);\r\n  pageload.addEventListener(\"complete\", update);\r\n  \r\n  \r\n  /* Exports */\r\n  exports.addEventListener = addEventListener;\r\n  exports.removeEventListener = removeEventListener;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/ytready.js");

eval("/**\r\n* An enum for the caller origin.\r\n*\r\n* @namespace Player.Listeners\r\n* @class Origins\r\n**/\r\ndefine(\'player/listeners/origins\',[\"exports\"], function(exports){\r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property PLAYER\r\n  * @type Number\r\n  **/\r\n  exports.PLAYER = 0;\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property PROPERTY\r\n  * @type Number\r\n  **/\r\n  exports.PROPERTY = 1;\r\n  \r\n  return exports;\r\n})\n//# sourceURL=/player/listeners/origins.js");

eval("/**\r\n* The events for the player listener.\r\n*\r\n* @namespace Player.Listeners\r\n* @class Events\r\n**/\r\ndefine(\'player/listeners/events\',[\"exports\"], function(exports){\r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onApiChange\r\n  * @type String\r\n  **/\r\n  exports.onApiChange = \"onApiChange\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onCueRangeEnter\r\n  * @type String\r\n  **/\r\n  exports.onCueRangeEnter = \"onCueRangeEnter\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onCueRangeExit\r\n  * @type String\r\n  **/\r\n  exports.onCueRangeExit = \"onCueRangeExit\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onError\r\n  * @type String\r\n  **/\r\n  exports.onError = \"onError\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onNavigate\r\n  * @type String\r\n  **/\r\n  exports.onNavigate = \"onNavigate\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onPlaybackQualityChange\r\n  * @type String\r\n  **/\r\n  exports.onPlaybackQualityChange = \"onPlaybackQualityChange\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onStateChange\r\n  * @type String\r\n  **/\r\n  exports.onStateChange = \"onStateChange\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onTabOrderChange\r\n  * @type String\r\n  **/\r\n  exports.onTabOrderChange = \"onTabOrderChange\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onVolumeChange\r\n  * @type String\r\n  **/\r\n  exports.onVolumeChange = \"onVolumeChange\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onAdStart\r\n  * @type String\r\n  **/\r\n  exports.onAdStart = \"onAdStart\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onReady\r\n  * @type String\r\n  **/\r\n  exports.onReady = \"onReady\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property RATE_SENTIMENT\r\n  * @type String\r\n  **/\r\n  exports.RATE_SENTIMENT = \"RATE_SENTIMENT\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property SHARE_CLICKED\r\n  * @type String\r\n  **/\r\n  exports.SHARE_CLICKED = \"SHARE_CLICKED\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property SIZE_CLICKED\r\n  * @type String\r\n  **/\r\n  exports.SIZE_CLICKED = \"SIZE_CLICKED\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property WATCH_LATER\r\n  * @type String\r\n  **/\r\n  exports.WATCH_LATER = \"WATCH_LATER\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property AdvertiserVideoView\r\n  * @type String\r\n  **/\r\n  exports.AdvertiserVideoView = \"AdvertiserVideoView\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property captionschanged\r\n  * @type String\r\n  **/\r\n  exports.captionschanged = \"captionschanged\";\r\n  \r\n  /**\r\n  * @static\r\n  * @readOnly\r\n  * @property onRemoteReceiverSelected\r\n  * @type String\r\n  **/\r\n  exports.onRemoteReceiverSelected = \"onRemoteReceiverSelected\";\r\n  \r\n  return exports;\r\n})\n//# sourceURL=/player/listeners/events.js");

eval("/**\r\n* Handles the player listeners.\r\n*\r\n* @namespace Player\r\n* @class Listeners\r\n**/\r\ndefine(\'player/listeners\',[\"exports\", \"../utils\", \"./api\", \"../unsafeWindow\", \"../console\", \"./onYouTubePlayerReady\", \"../ytready\", \"./listeners/origins\", \"./listeners/events\"],\r\nfunction(exports, utils, playerAPI, uw, con, onReady, ytready, Origin, Events){\r\n  /**\r\n  * Get the YouTube listener for the passed event.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getYouTubeListener\r\n  * @param {String} event The event name.\r\n  * @return {Function} Returns the YouTube listener with the given event name.\r\n  **/\r\n  function getYouTubeListener(event) {\r\n    var ytEvent = getListenerName(event);\r\n    return ytListeners[ytEvent];\r\n  }\r\n  \r\n  /**\r\n  * The latest player id and player uid registered in the global window.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getPlayerListenerDetails\r\n  * @return {Object} An object with the `id` property and the `uid` property.\r\n  **/\r\n  function getPlayerListenerDetails() {\r\n    var id = 1;\r\n    var uid = null;\r\n    \r\n    utils.each(uw, function(key, value){\r\n      if (key.indexOf(\"ytPlayer\") === 0) {\r\n        if (key.indexOf(\"player_uid_\") !== -1) {\r\n          var uidMatch = key.match(/player_uid_([0-9]+)_([0-9]+)$/);\r\n          \r\n          uid = parseInt(uidMatch[1], 10);\r\n          i = parseInt(uidMatch[2], 10);\r\n          \r\n          if (i > id) {\r\n            id = i;\r\n          }\r\n        } else {\r\n          var idMatch = key.match(/player([0-9]+)$/);\r\n          i = parseInt(idMatch[1], 10);\r\n          if (i > id) {\r\n            id = i;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    \r\n    return { id: id, uid: uid };\r\n  }\r\n  \r\n  /**\r\n  * The property name of the event in the global window.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getListenerName\r\n  * @param {String} event The event name.\r\n  * @return {String} The property name of the event.\r\n  **/\r\n  function getListenerName(event) {\r\n    if (playerListenerDetails.uid !== null) {\r\n      return \"ytPlayer\" + event + \"player_uid_\" + playerListenerDetails.uid + \"_\" + playerListenerDetails.id;\r\n    } else {\r\n      return \"ytPlayer\" + event + \"player\" + playerListenerDetails.id;\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * The setter function for the event property in the global window.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method ytListenerContainerSetter\r\n  * @param {String} event The event name.\r\n  * @param {Function} func The event listener.\r\n  **/\r\n  function ytListenerContainerSetter(event, func) {\r\n    var ytEvent = getListenerName(event);\r\n    ytListeners[ytEvent] = func;\r\n  }\r\n  \r\n  /**\r\n  * The getter function for the event property in the global window.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method ytListenerContainerGetter\r\n  * @param {String} event The event name.\r\n  * @return {Function} The event listener.\r\n  **/\r\n  function ytListenerContainerGetter(event) {\r\n    return utils.bind(null, callListener, event, Origin.PROPERTY);\r\n  }\r\n  \r\n  /**\r\n  * Handles the added listeners and YouTube\'s listeners.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method callListener\r\n  * @param {String} event The event name.\r\n  * @param {PlayerListenersOrigin} origin The call origin.\r\n  * @return {any} The return value of the called listeners.\r\n  **/\r\n  function callListener(event, origin) {\r\n    function generateThisObject() {\r\n      return {\r\n        getOriginalListener: utils.bind(null, getYouTubeListener, event)\r\n      };\r\n    }\r\n    \r\n    var ytEvent = getListenerName(event);\r\n    var args = Array.prototype.slice.call(arguments, 2);\r\n    var returnVal = null;\r\n    \r\n    con.debug(\"Listener \" + event + \" called from [\" + origin + \"]\", args);\r\n    \r\n    if (enabled && origin === Origin.PLAYER && (!events.hasOwnProperty(event) || (events.hasOwnProperty(event) && !events[event].override))) {\r\n      /* Override is false and the origin is from the player; call the YouTube Center listeners */\r\n      if (events.hasOwnProperty(event)) {\r\n        for (var i = 0, len = events[event].listeners.length; i < len; i++) {\r\n          returnVal = events[event].listeners[i].apply(null, args);\r\n        }\r\n      }\r\n    } else if (enabled && origin === Origin.PROPERTY) {\r\n      if (events.hasOwnProperty(event) && events[event].override) {\r\n        /* Override is true and the origin is from the global window; call the YouTube Center listeners */\r\n        for (var i = 0, len = events[event].listeners.length; i < len; i++) {\r\n          events[event].listeners[i].apply(generateThisObject(), args);\r\n        }\r\n      } else if (ytListeners[ytEvent]) {\r\n        if (apiNotAvailable) {\r\n          /* API is not available therefore call YouTube Center listeners as YouTube listener is called  */\r\n          for (var i = 0, len = events[event].listeners.length; i < len; i++) {\r\n            returnVal = events[event].listeners[i].apply(null, args);\r\n          }\r\n        }\r\n        \r\n        /* Override is false and the origin is from the global window; call the YouTube listener */\r\n        returnVal = ytListeners[ytEvent].apply(uw, args);\r\n      }\r\n    } else if (!enabled) {\r\n      /* Everything is disabled; call the YouTube listener */\r\n      returnVal = ytListeners[ytEvent].apply(uw, args);\r\n    }\r\n    return returnVal;\r\n  }\r\n  \r\n  /**\r\n  * Adding the listeners to the player.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method addPlayerListener\r\n  **/\r\n  function addPlayerListener() {\r\n    var api = playerAPI.getAPI();\r\n    var event;\r\n    \r\n    if (api && api.addEventListener) {\r\n      apiNotAvailable = false;\r\n      for (event in events) {\r\n        if (events.hasOwnProperty(event)) {\r\n          playerListener[event] = utils.bind(null, callListener, event, Origin.PLAYER);\r\n          api.addEventListener(event, playerListener[event]);\r\n        }\r\n      }\r\n    } else {\r\n      apiNotAvailable = true;\r\n      con.error(\"[Player Listener] Player API is not available!\");\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Initializing the global listeners.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method initGlobalListeners\r\n  **/\r\n  function initGlobalListeners() {\r\n    if (globalListenersInitialized) return; // Make sure that this function is only called once.\r\n    globalListenersInitialized = true;\r\n    for (var event in events) {\r\n      if (events.hasOwnProperty(event)) {\r\n        var ytEvent = getListenerName(event);\r\n        if (uw[ytEvent]) {\r\n          ytListeners[ytEvent] = uw[ytEvent];\r\n        }\r\n        utils.defineLockedProperty(uw, ytEvent,\r\n          utils.bind(null, ytListenerContainerSetter, event),\r\n          utils.bind(null, ytListenerContainerGetter, event)\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Initializing the player listener wrapper.\r\n  *\r\n  * @static\r\n  * @method init\r\n  **/\r\n  function init() {\r\n    if (enabled) return;\r\n    \r\n    con.debug(\"Init player listener\");\r\n    \r\n    var api = playerAPI.getAPI();\r\n    playerListenerDetails = getPlayerListenerDetails();\r\n    \r\n    enabled = true; // Indicate that the it\'s active.\r\n\r\n    // Add the listeners normally to the player\r\n    addPlayerListener();\r\n    \r\n    // Replace the global listeners with custom listeners in case the override property is set to true\r\n    initGlobalListeners();\r\n  }\r\n  \r\n  /**\r\n  * Adding an event listener.\r\n  *\r\n  * @static\r\n  * @method addEventListener\r\n  * @param {String} event The event name.\r\n  * @param {Function} listener The listener.\r\n  **/\r\n  function addEventListener(event, listener) {\r\n    if (!events.hasOwnProperty(event)) return;\r\n    \r\n    removeEventListener(event, listener); // Make sure that there is only one instance of the listener registered.\r\n    events[event].listeners.push(listener);\r\n  }\r\n  \r\n  /**\r\n  * Removing an event listener.\r\n  *\r\n  * @static\r\n  * @method removeEventListener\r\n  * @param {String} event The event name.\r\n  * @param {Function} listener The listener.\r\n  **/\r\n  function removeEventListener(event, listener) {\r\n    if (!events.hasOwnProperty(event)) return;\r\n    for (var i = 0, len = events[event].listeners.length; i < len; i++) {\r\n      if (events[event].listeners[i] === listener) {\r\n        return events[event].listeners.splice(i, 1);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Set the event to override the YouTube\'s event listener\r\n  * so that they won\'t be called except if done so manually.\r\n  *\r\n  * @static\r\n  * @method setOverride\r\n  * @param {String} event The event name.\r\n  * @param {Boolean} override Whether the event should be set to override.\r\n  **/\r\n  function setOverride(event, override) {\r\n    if (!events.hasOwnProperty(event)) return;\r\n    events[event].override = !!override;\r\n  }\r\n  \r\n  /**\r\n  * Unload the player listeners added to the player\r\n  * through the player API.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method unloadPlayerListeners\r\n  **/\r\n  function unloadPlayerListeners() {\r\n    var api = playerAPI.getAPI();\r\n    var event;\r\n    \r\n    if (api && api.removeEventListener) {\r\n      for (event in events) {\r\n        if (events.hasOwnProperty(event)) {\r\n          api.removeEventListener(event, playerListener[event]);\r\n          delete playerListener[event];\r\n        }\r\n      }\r\n    } else {\r\n      con.error(\"[Player Listener] Player API is not available!\");\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Unload the player listener wrapper.\r\n  *\r\n  * @static\r\n  * @method unload\r\n  **/\r\n  function unload() {\r\n    unloadPlayerListeners();\r\n    enabled = false;\r\n    apiNotAvailable = true;\r\n  }\r\n  \r\n  /**\r\n  * The cached player id and uid.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property playerListenerDetails\r\n  * @type Object\r\n  **/\r\n  var playerListenerDetails = { id: 1, uid: null };\r\n  \r\n  /**\r\n  * The leaked YouTube listeners.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property ytListeners\r\n  * @type Object\r\n  **/\r\n  var ytListeners = {};\r\n  \r\n  /**\r\n  * The cached player listeners.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property playerListener\r\n  * @type Object\r\n  **/\r\n  var playerListener = {};\r\n  \r\n  /**\r\n  * If the player listeners handler is enabled.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property enabled\r\n  * @type Boolean\r\n  **/\r\n  var enabled = false;\r\n  \r\n  /**\r\n  * If the global listeners are initialized.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property globalListenersInitialized\r\n  * @type Boolean\r\n  **/\r\n  var globalListenersInitialized = false;\r\n  \r\n  /**\r\n  * If the player API is available.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property apiNotAvailable\r\n  * @type Boolean\r\n  **/\r\n  var apiNotAvailable = true;\r\n  \r\n  /**\r\n  * The event listeners and options.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property events\r\n  * @type Object\r\n  **/\r\n  var events = {};\r\n  for (var event in Events) {\r\n    if (Events.hasOwnProperty(event)) {\r\n      events[event] = { override: false, listeners: [] };\r\n    }\r\n  }\r\n  \r\n  // Intialize the player listeners at player on ready.\r\n  onReady.addListener(init);\r\n  \r\n  /* Exports */\r\n  exports.addEventListener = addEventListener;\r\n  exports.removeEventListener = removeEventListener;\r\n  exports.setOverride = setOverride;\r\n  exports.init = init;\r\n  exports.unload = unload;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/player/listeners.js");

eval("define(\'window\',[], function(){\r\n  function getInnerWidth() {\r\n    return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n  }\r\n  function getInnerHeight() {\r\n    return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n  }\r\n  \r\n  function getClientWidth() {\r\n    return document.documentElement.clientWidth || window.innerWidth || document.body.clientWidth;\r\n  }\r\n  \r\n  function getClientHeight() {\r\n    return document.documentElement.clientHeight || window.innerHeight || document.body.clientHeight;\r\n  }\r\n  \r\n  function addEventListener(event, callback, capture) {\r\n    window.addEventListener(event, callback, capture);\r\n  }\r\n  \r\n  return {\r\n    getClientWidth: getClientWidth,\r\n    getClientHeight: getClientHeight,\r\n    getInnerWidth: getInnerWidth,\r\n    getInnerHeight: getInnerHeight,\r\n    addEventListener: addEventListener\r\n  }\r\n});\n//# sourceURL=/window.js");

eval("define(\'player/size\',[\"exports\", \"./listeners\", \"./player\", \"window\", \"utils\"], function(exports, listeners, player, win, utils){\r\n  function onPlayerSizeChange(large) {\r\n    if (large) {\r\n      setSize(largeSize);\r\n    } else {\r\n      setSize(smallSize);\r\n    }\r\n    update();\r\n  }\r\n  \r\n  function setSize(nSize) {\r\n    size = nSize;\r\n    update();\r\n  }\r\n  \r\n  function update() {\r\n    var playerEl = document.getElementById(\"player\");\r\n    var playerAPIEl = document.getElementById(\"player-api\");\r\n    var playerTheaterBackgroundEl = document.getElementById(\"theater-background\");\r\n    \r\n    utils.removeClass(playerEl, \"watch-small watch-medium watch-large\");\r\n    if (size.large) {\r\n      utils.addClass(playerEl, \"watch-large\");\r\n    } else {\r\n      utils.addClass(playerEl, \"watch-small\");\r\n    }\r\n    \r\n    var dim = getPlayerDimension();\r\n    if (size.large) {\r\n      playerEl.style.width = dim.width + \"px\";\r\n    } else {\r\n      playerEl.style.width = \"auto\";\r\n    }\r\n    playerTheaterBackgroundEl.style.height = dim.height + \"px\";\r\n    \r\n    playerAPIEl.style.width = dim.width + \"px\";\r\n    playerAPIEl.style.height = dim.height + \"px\";\r\n    \r\n    var contentContainerEl = document.getElementById(\"watch7-container\");\r\n    if (size.large) {\r\n      utils.addClass(contentContainerEl, \"watch-wide\");\r\n    } else {\r\n      utils.removeClass(contentContainerEl, \"watch-wide\");\r\n    }\r\n    \r\n    var sidebarEl = document.getElementById(\"watch7-sidebar\");\r\n    if (size.large) {\r\n      sidebarEl.style.top = \"\";\r\n    } else {\r\n      sidebarEl.style.top = \"-\" + dim.height + \"px\";\r\n    }\r\n  }\r\n  \r\n  function getPlayerDimension() {\r\n    var playerEl = document.getElementById(\"player\");\r\n    \r\n    var width = null;\r\n    var height = null;\r\n    \r\n    if (typeof size.width === \"number\") {\r\n      if (size.widthUnit === \"%\") {\r\n        width = size.width/100*win.getClientWidth();\r\n      } else {\r\n        width = size.width;\r\n      }\r\n    }\r\n    \r\n    if (typeof size.width === \"number\") {\r\n      if (size.heightUnit === \"%\") {\r\n        height = size.height/100*win.getClientHeight();\r\n        // if (something.isTopBar())\r\n        height -= 50;\r\n      } else {\r\n        height = size.height;\r\n      }\r\n    }\r\n    \r\n    var ratio = getRatio();\r\n    \r\n    if (typeof width !== \"number\") {\r\n      if (typeof height === \"number\") {\r\n        width = height*ratio;\r\n      } else {\r\n        width = getDefaultWidth();\r\n      }\r\n    }\r\n    \r\n    if (typeof height !== \"number\") {\r\n      if (typeof width === \"number\") {\r\n        height = width/ratio;\r\n      } else {\r\n        height = getDefaultHeight();\r\n      }\r\n    }\r\n    \r\n    // Controlbar + Progressbar height\r\n    var controlbarHeight = player.getControlbarHeight();\r\n    height += controlbarHeight;\r\n    \r\n    // Multi camera additional height\r\n    if (utils.hasClass(playerEl, \"watch-multicamera\") && player.getType === \"flash\") {\r\n      height += 80;\r\n    }\r\n    \r\n    return {\r\n      width: Math.floor(width),\r\n      height: Math.floor(height)\r\n    };\r\n  }\r\n  \r\n  function setSmallPlayerSize(small) {\r\n    smallSize = small;\r\n  }\r\n  \r\n  function setLargePlayerSize(large) {\r\n    largeSize = large;\r\n  }\r\n  \r\n  function getRatio() {\r\n    return 16/9;\r\n  }\r\n  \r\n  function getDefaultWidth() {\r\n    return 640;\r\n  }\r\n  \r\n  function getDefaultHeight() {\r\n    return getDefaultWidth()/getRatio();\r\n  }\r\n  \r\n  var smallSize = {\r\n    width: 1280,\r\n    widthUnit: \"px\",\r\n    large: true\r\n  };\r\n  var largeSize = {\r\n    width: 1920,\r\n    widthUnit: \"px\",\r\n    large: true\r\n  };\r\n  \r\n  var size = {\r\n    width: 1280,\r\n    height: 720,\r\n    widthUnit: \"px\",\r\n    heightUnit: \"px\",\r\n    large: true\r\n  };\r\n  \r\n  listeners.setOverride(\"SIZE_CLICKED\", true);\r\n  listeners.addEventListener(\"SIZE_CLICKED\", onPlayerSizeChange);\r\n  \r\n  win.addEventListener(\"resize\", utils.throttle(update, 100));\r\n  \r\n  /* Exports */\r\n  exports.setSize = setSize;\r\n  exports.getRatio = getRatio;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/player/size.js");

eval("/**\r\n* @namespace Player\r\n* @class ElementType\r\n**/\r\ndefine(\'player/ElementType\',[\"exports\"], function(exports){\r\n  \r\n  /**\r\n  * @static\r\n  * @property EMBEDDED\r\n  * @type String\r\n  **/\r\n  exports.EMBEDDED = \"embedded\";\r\n  \r\n  /**\r\n  * @static\r\n  * @property WATCH\r\n  * @type String\r\n  **/\r\n  exports.WATCH = \"watch\";\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/player/ElementType.js");

eval("/**\r\n* The YouTube player.\r\n*\r\n* @namespace Player\r\n* @class Player\r\n**/\r\ndefine(\'player/player\',[\"exports\", \"./api\", \"./config\", \"unsafeWindow\", \"./size\", \"./ElementType\", \"../utils\"], function(exports, playerAPI, playerConfig, uw, size, ElementType, utils){\r\n  function getElementType() {\r\n    \r\n  }\r\n  \r\n  /**\r\n  * Get the current player type, which can either be HTML5 or flash.\r\n  *\r\n  * @static\r\n  * @method getType\r\n  * @return {String} The player type.\r\n  **/\r\n  function getType() {\r\n    var api = playerAPI.getAPI();\r\n    if (api && typeof api.getPlayerType === \"function\") {\r\n      return api.getPlayerType();\r\n    }\r\n    var cfg = playerConfig.getConfig();\r\n    if (cfg.html5) {\r\n      return \"html5\";\r\n    } else {\r\n      return \"flash\";\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Setting the player type to either HTML5 or flash\r\n  *\r\n  * @static\r\n  * @method setType\r\n  * @param {String} type The desired player type (HTML5 or flash).\r\n  **/\r\n  function setType(type) {\r\n    var currentType = getType();\r\n    if (type === currentType) {\r\n      return; // Do nothing as it\'s already the desired player type\r\n    } else {\r\n      var api = playerAPI.getAPI();\r\n      playerConfig.setConfig(\"html5\", (type === \"html5\" ? true : false)); // Setting the property html5 to either true or false\r\n      \r\n      // Soft-reloading the player. If YouTube detects that the html5 property has changed it will change the player.\r\n      if (api && typeof api.loadNewVideoConfig === \"function\") {\r\n        api.loadNewVideoConfig(uw.ytplayer.config);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Get the controlbar height.\r\n  *\r\n  * @static\r\n  * @method getControlbarHeight\r\n  * @return {Number} The height of the controlbar on the player.\r\n  **/\r\n  function getControlbarHeight() {\r\n    var none = 0;\r\n    var onlyControlbar = 3;\r\n    var onlyProgressbar = 30;\r\n    var both = 35;\r\n    \r\n    var cfg = playerConfig.getConfig();\r\n    var autohide = null;\r\n    \r\n    if (cfg && cfg.args && typeof cfg.args.autohide === \"string\") {\r\n      autohide = cfg.args.autohide;\r\n    } else if (getType() === \"html5\") {\r\n      var ratio = size.getRatio();\r\n      if (ratio < 1.35) {\r\n        autohide = \"3\";\r\n      }\r\n    }\r\n    \r\n    switch (autohide) {\r\n      case \"0\": return both;\r\n      case \"1\": return none;\r\n      case \"3\": return onlyControlbar;\r\n      case \"2\": default: return onlyProgressbar;\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Calling yt.player.Application.create to tell YouTube to\r\n  * create the YouTube player again and dispose of the old\r\n  * player.\r\n  *\r\n  * @static\r\n  * @method reload\r\n  **/\r\n  function reload() {\r\n    if (uw && uw.yt && uw.yt.player && uw.yt.player.Application && typeof uw.yt.player.Application.create === \"function\") {\r\n      uw.yt.player.Application.create(\"player-api\", playerConfig.getConfig());\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * An object that contains the player\'s API.\r\n  *\r\n  * @static\r\n  * @property api\r\n  * @type Object\r\n  * @readOnly\r\n  **/\r\n  utils.defineProperty(exports, \"api\", playerAPI.getAPI, function(){});\r\n  \r\n  /**\r\n  * Get the player API.\r\n  *\r\n  * @static\r\n  * @method getAPI\r\n  * @return {Object} The player api.\r\n  * @deprecated Use `player.api` instead.\r\n  **/\r\n  exports.getAPI = playerAPI.getAPI;\r\n  \r\n  exports.getType = getType;\r\n  exports.setType = setType;\r\n  exports.getControlbarHeight = getControlbarHeight;\r\n  exports.getConfig = playerConfig.getConfig;\r\n  exports.setConfig = playerConfig.setConfig;\r\n  exports.reload = reload;\r\n  return exports;\r\n});\n//# sourceURL=/player/player.js");

eval("define(\'placement-dragdrop\',[\"exports\", \"./utils\"], function(exports, utils){\r\n  function getTargetedGroup(x, y, groups) {\r\n    var distance = null;\r\n    var heightGroup = null;\r\n    \r\n    for (var i = 0, len = groups.length; i < len; i++) {\r\n      // Group element\r\n      var group = groups[i];\r\n      \r\n      // Getting the absolute position of the group element\r\n      var absolutePosition = utils.getAbsolutePosition(group);\r\n      \r\n      /*\r\n      * The points on the rectangle, which represents the group element.\r\n      * px is 1 and 2,\r\n      * py is 1 and 3,\r\n      * pWidth is 2 and 4,\r\n      * pHeight is 3 and 4\r\n      * 1------------2\r\n      * |            |\r\n      * |            |\r\n      * 3------------4\r\n      */\r\n      var px = absolutePosition.left;\r\n      var py = absolutePosition.top;\r\n      var pWidth = absolutePosition.left + group.offsetWidth;\r\n      var pHeight = absolutePosition.top + group.offsetHeight;\r\n      \r\n      // Detecting if the (x, y) point is inside or touches the group element (rectangle)\r\n      if (x >= px && x <= pWidth && y >= py && y <= pHeight) {\r\n        return group;\r\n      } else if (y >= py && y <= pHeight) {\r\n        var tmpDist = null;\r\n        if (x < px) {\r\n          // Left side\r\n          tmpDist = px - x;\r\n        } else if (x > pWidth) {\r\n          // Right side\r\n          tmpDist = x - pWidth;\r\n        } else {\r\n          continue; // This should never happen.\r\n        }\r\n        if (distance === null || tmpDist < distance) {\r\n          heightGroup = group;\r\n          distance = tmpDist;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return heightGroup;\r\n  }\r\n  \r\n  function getRelativeGroupChild(x, y, group) {\r\n    // The cursor is inside a group element.\r\n    if (group !== null) {\r\n      var groupChildren = group.children;\r\n      \r\n      // Iterate through every child of group\r\n      for (var i = 0, len = groupChildren.length; i < len; i++) {\r\n        var child = groupChildren[i];\r\n        // Making sure that an element is not placed beside itself.\r\n        if (child !== refMoveableElement && child !== refTargetedElement) {\r\n          // Get the child\'s absolute position on the page\r\n          var absolutePosition = utils.getAbsolutePosition(child);\r\n          \r\n          // The for loop iterates through the children chronological, which means that\r\n          // it only needs to look if the x-value of the cursor is before half of the\r\n          // child element.\r\n          if (x <= child.offsetWidth/2 + absolutePosition.left && y <= child.offsetHeight + absolutePosition.top) {\r\n            return child;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // No child was found, return null\r\n    return null;\r\n  }\r\n  \r\n  function mousemoveListener(e) {\r\n    if (!mousedown || !moduleEnabled) return;\r\n    e = e || window.event;\r\n    \r\n    // If user is using touch, make sure that it detects the touch instead of mouse.\r\n    if (e && e.type.indexOf(\"touch\") !== -1 && e.changedTouches && e.changedTouches.length > 0 && e.changedTouches[0]) {\r\n      e = e.changedTouches[0];\r\n    }\r\n    \r\n    // The (x, y) coordinate of the mouse cursor on the page\r\n    var x = e.pageX;\r\n    var y = e.pageY;\r\n    \r\n    // Update the moveable element position\r\n    refMoveableElement.style.top = (y - (relativeMousePosition.y || 0)) + \"px\";\r\n    refMoveableElement.style.left = (x - (relativeMousePosition.x || 0)) + \"px\";\r\n    \r\n    // Get the targeted group with the (x, y) coordinate of the cursor\r\n    var group = getTargetedGroup(x, y, groupElements);\r\n    \r\n    if (group) {\r\n      // Get the relative group child element\r\n      var child = getRelativeGroupChild(x, y, group);\r\n      \r\n      // Make sure that targeted element does have a parent to remove\r\n      // the element from\r\n      if (refTargetedElement.parentNode) {\r\n        refTargetedElement.parentNode.removeChild(refTargetedElement);\r\n      }\r\n      \r\n      if (child) {\r\n        // A child was found insert the targeted element before said child\r\n        group.insertBefore(refTargetedElement, child);\r\n      } else {\r\n        // A child was not found just append the element to the group\r\n        group.appendChild(refTargetedElement);\r\n      }\r\n    }\r\n    \r\n    // Prevent default action\r\n    if (e && e.preventDefault) {\r\n      e.preventDefault();\r\n    } else {\r\n      window.event.returnValue = false;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  function mousedownListener(e) {\r\n    if (mousedown || !moduleEnabled) return;\r\n    \r\n    e = e || window.event;\r\n    \r\n    var targetedElement = e.target;\r\n    while (targetedElement) {\r\n      if (!targetedElement.parentNode) return; // Targeted element not in a container\r\n      \r\n      // Is the targeted element a child of groupElements\r\n      // and if so then we break out of this loop\r\n      if (utils.inArray(groupElements, targetedElement.parentNode)) {\r\n        break;\r\n      }\r\n      \r\n      // The desired element is a child to one of the containers.\r\n      targetedElement = targetedElement.parentNode;\r\n    }\r\n    \r\n    mousedown = true;\r\n    \r\n    // Relative position to targeted element\r\n    var absolutePosition = utils.getAbsolutePosition(targetedElement);\r\n    relativeMousePosition = {\r\n      x: e.pageX - absolutePosition.left,\r\n      y: e.pageY - absolutePosition.top\r\n    };\r\n    \r\n    // Create the moveable element\r\n    var moveableElement = createMoveableElement(targetedElement);\r\n    \r\n    // Make the targeted element invisible\r\n    utils.addClass(targetedElement, \"placementsystem-target\");\r\n    //targetedElement.style.visibility = \"hidden\";\r\n    \r\n    // Store two references for later use\r\n    refMoveableElement = moveableElement;\r\n    refTargetedElement = targetedElement;\r\n    \r\n    document.body.appendChild(moveableElement);\r\n    \r\n    // Add mouseup, mousemove, touchend and touchmove event listener\r\n    utils.addEventListener(document, \"mousemove\", mousemoveListener, false);\r\n    utils.addEventListener(document, \"touchmove\", mousemoveListener, false);\r\n    \r\n    // Prevent default action\r\n    if (e && e.preventDefault) {\r\n      e.preventDefault();\r\n    } else {\r\n      window.event.returnValue = false;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  function mouseupListener(e) {\r\n    if (!mousedown || !moduleEnabled || !refTargetedElement) return;\r\n    mousedown = false;\r\n    \r\n    e = e || window.event;\r\n    \r\n    // Make the targeted element visible\r\n    utils.removeClass(refTargetedElement, \"placementsystem-target\");\r\n    //refTargetedElement.style.visibility = \"\";\r\n    \r\n    // Remove the moveable element from the DOM\r\n    refMoveableElement.parentNode.removeChild(refMoveableElement);\r\n    \r\n    // Remove relative mouse position\r\n    relativeMousePosition = null;\r\n    \r\n    // Remove stored references\r\n    refMoveableElement = null;\r\n    refTargetedElement = null;\r\n    \r\n    // Remove mousemove and touchmove event listener\r\n    utils.removeEventListener(document, \"mousemove\", mousemoveListener, false);\r\n    utils.removeEventListener(document, \"touchmove\", mousemoveListener, false);\r\n    \r\n    // Prevent default action\r\n    if (e && e.preventDefault) {\r\n      e.preventDefault();\r\n    } else {\r\n      window.event.returnValue = false;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  function setGroupElements(groups) {\r\n    groupElements = groups;\r\n  }\r\n  \r\n  function setMoveableElementPosition(el, moveableElement) {\r\n    var absolutePosition = utils.getAbsolutePosition(el);\r\n    \r\n    // Give the moveable an absolute position, which will be\r\n    // on top of the original element.\r\n    moveableElement.style.position = \"absolute\";\r\n    moveableElement.style.top = absolutePosition.top + \"px\";\r\n    moveableElement.style.left = absolutePosition.left + \"px\";\r\n    moveableElement.style.zIndex = \"1999999999999\";\r\n  }\r\n  \r\n  function createMoveableElement(el) {\r\n    function removeTooltip(el) {\r\n      // Removes tooltip from element\r\n      el.title = \"\";\r\n      el.setAttribute(\"data-button-action\", \"\");\r\n      el.setAttribute(\"data-tooltip-text\", \"\");\r\n      utils.removeClass(el, \"yt-uix-tooltip\");\r\n      \r\n      // Removes tooltip from children\r\n      var children = el.children;\r\n      for (var i = 0, len = children.length; i < len; i++) {\r\n        removeTooltip(children[i]);\r\n      }\r\n    }\r\n    var moveableElement = el.cloneNode(true);\r\n    \r\n    // Move the moveable element on top of the targeted element\r\n    setMoveableElementPosition(el, moveableElement);\r\n    \r\n    // Removes tooltip from the moveable element\r\n    removeTooltip(moveableElement);\r\n    \r\n    return moveableElement;\r\n  }\r\n  \r\n  function setEnabled(enabled) {\r\n    moduleEnabled = enabled;\r\n    \r\n    utils.removeEventListener(document, \"mousemove\", mousemoveListener, false);\r\n    utils.removeEventListener(document, \"touchmove\", mousemoveListener, false);\r\n    \r\n    utils.removeEventListener(document, \"mousedown\", mousedownListener, false);\r\n    utils.removeEventListener(document, \"touchstart\", mousedownListener, false);\r\n    \r\n    utils.removeEventListener(document, \"mouseup\", mouseupListener, false);\r\n    utils.removeEventListener(document, \"touchend\", mouseupListener, false);\r\n    \r\n    if (enabled) {\r\n      utils.addEventListener(document, \"mousedown\", mousedownListener, false);\r\n      utils.addEventListener(document, \"touchstart\", mousedownListener, false);\r\n      \r\n      utils.addEventListener(document, \"mouseup\", mouseupListener, false);\r\n      utils.addEventListener(document, \"touchend\", mouseupListener, false);\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * An array of where the moveable elements can be placed in.\r\n  *\r\n  * @property groupElements\r\n  * @type HTMLElement[]\r\n  **/\r\n  var groupElements = [ ];\r\n  \r\n  // A reference to the moveable and targeted elements for use in mousemove\r\n  var relativeMousePosition = null;\r\n  var refMoveableElement = null;\r\n  var refTargetedElement = null;\r\n  \r\n  // Local properties\r\n  /**\r\n  * Used to check if the drag \'n\' drop is enabled.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property moduleEnabled\r\n  * @type Boolean\r\n  **/\r\n  var moduleEnabled = false;\r\n  \r\n  /**\r\n  * Used to check if the left mouse button is pressed,\r\n  * and if it is then it should move the element.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property mousedown\r\n  * @type Boolean\r\n  **/\r\n  var mousedown = false;\r\n  \r\n  // Throttle the listener as it can be taxing for the users system.\r\n  mousemoveListener = utils.throttle(mousemoveListener, 50);\r\n  \r\n  exports.setGroupElements = setGroupElements;\r\n  exports.setEnabled = setEnabled;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/placement-dragdrop.js");

eval("define(\'element-placement\',[\"exports\", \"./utils\", \"./placement-dragdrop\", \"./pageload\"], function(exports, utils, dragdrop, pageload){\r\n  /**\r\n  * Adding an element to a defined group.\r\n  *\r\n  * @static\r\n  * @method addElement\r\n  * @param {String} id The id of the group.\r\n  * @param {HTMLElement} element The element that will be added to the group.\r\n  **/\r\n  function addElement(id, elementId, element) {\r\n    if (!groups[id]) throw \"Group \" + id + \" has not been created!\";\r\n    groups[id].children.push({ id: elementId, element: element });\r\n    \r\n    // Append the element to the group element\r\n    groups[id].element.appendChild(element);\r\n  }\r\n  \r\n  /**\r\n  * Creating a group where the elements will be placed in.\r\n  *\r\n  * @statc\r\n  * @method createGroup\r\n  * @param {String} id The id of the group.\r\n  * @param {HTMLElement} element The group element.\r\n  * @param {Object} options The options for the group.\r\n  **/\r\n  function createGroup(id, element, options) {\r\n    if (groups[id]) throw \"Group \" + id + \" has already been created!\";\r\n    groups[id] = {\r\n      element: element, // The container element where the children resides\r\n      options: options, // The options for that specific group\r\n      children: []\r\n    };\r\n  }\r\n  \r\n  /**\r\n  * Returns the unique ID for the given element.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getElementUniqueId\r\n  * @param {HTMLElement} element The element to get the element from.\r\n  * @return {String} The unique ID for the element.\r\n  **/\r\n  function getElementUniqueId(element) {\r\n    var classes = utils.listClass(element);\r\n    for (var i = 0, len = classes.length; i < len; i++) {\r\n      if (classes[i] !== \"\") {\r\n        classes[i] = encodeURIComponent(classes[i]);\r\n      }\r\n    }\r\n    \r\n    if (classes.length > 0) {\r\n      classes = \".\" + classes.join(\".\");\r\n      if (classes[classes.length - 1] === \".\") {\r\n        classes = classes.substring(0, classes.length - 1);\r\n      }\r\n    } else {\r\n      classes = \"\";\r\n    }\r\n    \r\n    var id = getGroupIdByElement(element);\r\n    if (typeof id === \"string\") {\r\n      id = \"@\" + encodeURIComponent(id);\r\n    } else {\r\n      id = element.getAttribute(\"id\");\r\n      if (id) {\r\n        id = \"#\" + encodeURIComponent(id);\r\n      } else {\r\n        id = \"\";\r\n      }\r\n    }\r\n    \r\n    var tagName = encodeURIComponent(element.tagName);\r\n    \r\n    var uid = null;\r\n    \r\n    var parent = element.parentNode && element.parentNode instanceof HTMLElement;\r\n    \r\n    if (!id && !classes && parent) {\r\n      var parentNode = element.parentNode;\r\n      for (var i = 0, len = parentNode.children.length; i < len; i++) {\r\n        if (parentNode.children[i] === element) {\r\n          uid = tagName + \"[\" + i + \"]\"\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      uid = tagName + id + classes;\r\n    }\r\n    \r\n    if (!id && parent) {\r\n      return getElementUniqueId(element.parentNode) + \" \" + uid;\r\n    } else {\r\n      return uid;\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Returns the HTMLElement with a specific unique ID.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getElementByUniqueId\r\n  * @param {String} id The unique ID.\r\n  * @return {HTMLElement} The element with the unique ID.\r\n  **/\r\n  function getElementByUniqueId(uid) {\r\n    var tokens = uid.split(\" \");\r\n    var element = null;\r\n    for (var i = 0, len = tokens.length; i < len; i++) {\r\n      var match = /([a-zA-Z0-9_%\\-]+)(\\[[0-9]+\\])?((\\#|\\@)[a-zA-Z0-9_%\\-]+)?((\\.[a-zA-Z0-9_%\\-]+)*)/g.exec(tokens[i]);\r\n      var tagName = decodeURIComponent(match[1]);\r\n      var childIndex = null;\r\n      if (match[2]) {\r\n        childIndex = parseInt(match[2].substring(1, match[2].length - 1), 10);\r\n      }\r\n      var id = null;\r\n      var regId = false;\r\n      if (match[3]) {\r\n        if (match[3].substring(0, 1) === \"@\") {\r\n          // The element is a registered group.\r\n          regId = true;\r\n        }\r\n        id = decodeURIComponent(match[3].substring(1));\r\n      }\r\n      \r\n      var classes = [];\r\n      if (match[5]) {\r\n        classes = match[5].substring(1).split(\".\");\r\n      }\r\n      for (var j = 0, lenj = classes.length; j < lenj; j++) {\r\n        classes[j] = decodeURIComponent(classes[j]);\r\n      }\r\n      \r\n      var doc = document;\r\n      if (element) {\r\n        doc = element;\r\n      }\r\n      var continues = false;\r\n      if (id) {\r\n        if (regId) {\r\n          element = getGroupElementByUniqueId(id);\r\n        } else {\r\n          element = document.getElementById(id);\r\n        }\r\n      } else if (classes.length > 0) {\r\n        var elements = doc.getElementsByClassName(classes.join(\" \"));\r\n        for (var j = 0, lenj = elements.length; j < lenj; j++) {\r\n          if (elements[j].tagName.toLowerCase() === tagName.toLowerCase()) {\r\n            element = elements[j];\r\n            continues = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!continues) return null;\r\n      } else if (typeof childIndex === \"number\") {\r\n        var elements = doc.getElementsByTagName(tagName);\r\n        for (var j = 0, lenj = elements.length; j < lenj; j++) {\r\n          if (elements[j] && elements[j].parentNode && elements[j].parentNode instanceof HTMLElement && elements[j].parentNode.children[childIndex] === elements[j]) {\r\n            element = elements[j];\r\n            continues = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!continues) return null;\r\n      } else {\r\n        element = doc.getElementsByTagName(tagName)[0];\r\n      }\r\n      \r\n      if (!element) {\r\n        return null;\r\n      }\r\n    }\r\n    \r\n    return element;\r\n  }\r\n  \r\n  /**\r\n  * Get the group element by an unique ID.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getGroupElementByUniqueId\r\n  * @param {String} id The unique Id of the group element.\r\n  * @return {HTMLElement} The group element.\r\n  **/\r\n  function getGroupElementByUniqueId(id) {\r\n    for (var key in groups) {\r\n      if (groups.hasOwnProperty(key)) {\r\n        if (key === id) {\r\n          return groups[key].element;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  /**\r\n  * Get the group ID by element.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getGroupIdByElement\r\n  * @param {HTMLElement} el The group element.\r\n  * @return {String} The unique Id of the group element.\r\n  **/\r\n  function getGroupIdByElement(el) {\r\n    for (var key in groups) {\r\n      if (groups.hasOwnProperty(key)) {\r\n        if (groups[key].element === el) {\r\n          return key;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  /**\r\n  * Get a registered element\'s unique ID.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getRegisteredElementUniqueId\r\n  * @param {HTMLElement} el The registered element.\r\n  * @return {String} Returns the unique ID of registered element.\r\n  **/\r\n  function getRegisteredElementUniqueId(el) {\r\n    for (var key in groups) {\r\n      if (groups.hasOwnProperty(key)) {\r\n        var children = groups[key].children;\r\n        for (var i = 0, len = children.length; i < len; i++) {\r\n          if (el === children[i].element) {\r\n            return children[i].id;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  /**\r\n  * Get a registered element by its unique ID.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getRegisteredElementByUniqueId\r\n  * @param {String} id The unique ID of the element.\r\n  * @return {HTMLElement} Returns the element.\r\n  **/\r\n  function getRegisteredElementByUniqueId(id) {\r\n    for (var key in groups) {\r\n      if (groups.hasOwnProperty(key)) {\r\n        var children = groups[key].children;\r\n        for (var i = 0, len = children.length; i < len; i++) {\r\n          if (id === children[i].id) {\r\n            return children[i].element;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  /**\r\n  * Check if an element is registered.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method isElementRegistered\r\n  * @param {HTMLElement} el The element to check if its registered.\r\n  * @return {Boolean} Returns true if element is registered otherwise return false.\r\n  **/\r\n  function isElementRegistered(el) {\r\n    for (var id in groups) {\r\n      if (groups.hasOwnProperty(id)) {\r\n        if (isElementInGroup(el, id)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  /**\r\n  * Check if an element is registered in a specific group.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method isElementRegistered\r\n  * @param {HTMLElement} el The element to check if its registered.\r\n  * @param {String} groupId The group ID.\r\n  * @return {Boolean} Returns true if element is registered in specified group otherwise return false.\r\n  **/\r\n  function isElementInGroup(el, groupId) {\r\n    if (!groups[groupId]) return false;\r\n    \r\n    var children = groups[groupId].children;\r\n    for (var i = 0, len = children.length; i < len; i++) {\r\n      if (children[i].element === el) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  /**\r\n  * Create a reference state to use as an reference when elements have been moved.\r\n  *\r\n  * @static\r\n  * @method createReferenceState\r\n  * @return {Object} The reference state.\r\n  **/\r\n  function createReferenceState() {\r\n    var map = {};\r\n    for (var key in groups) {\r\n      if (groups.hasOwnProperty(key)) {\r\n        var group = groups[key];\r\n        \r\n        var groupElements = [];\r\n        var el = group.element;\r\n        if (el && el.children) {\r\n          var children = el.children;\r\n          for (var i = 0, len = children.length; i < len; i++) {\r\n            var child = children[i];\r\n            var data = { };\r\n            if (isElementRegistered(child)) {\r\n              data.type = REGISTERED;\r\n              data.uniqueId = getRegisteredElementUniqueId(child);\r\n              data.element = child;\r\n            } else {\r\n              data.type = NONREGISTERED;\r\n              data.uniqueId = getElementUniqueId(child);\r\n              data.element = child;\r\n            }\r\n            groupElements.push(data);\r\n          }\r\n        }\r\n        map[key] = groupElements;\r\n      }\r\n    }\r\n    return map;\r\n  }\r\n  \r\n  /**\r\n  * Get the unique ID of an referenced element.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getReferencedUniqueId\r\n  * @param {HTMLElement} el The element.\r\n  * @return {String} Returns the unique ID of element.\r\n  **/\r\n  function getReferencedUniqueId(el) {\r\n    if (!referenceState) return null;\r\n    \r\n    for (var key in referenceState) {\r\n      if (referenceState.hasOwnProperty(key)) {\r\n        var group = referenceState[key];\r\n        for (var i = 0, len = group.length; i < len; i++) {\r\n          if (el === group[i].element) {\r\n            return group[i].uniqueId;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  /**\r\n  * Get the reference element by the unique ID.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getReferencedElement\r\n  * @param {String} el The unique ID.\r\n  * @return {String} Returns the element given by the unique ID.\r\n  **/\r\n  function getReferencedElement(id) {\r\n    if (!referenceState) return null;\r\n    \r\n    for (var key in referenceState) {\r\n      if (referenceState.hasOwnProperty(key)) {\r\n        var group = referenceState[key];\r\n        for (var i = 0, len = group.length; i < len; i++) {\r\n          if (id === group[i].uniqueId) {\r\n            return group[i].element;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  /**\r\n  * Get the current state.\r\n  *\r\n  * @static\r\n  * @method getState\r\n  * @return {Object} Returns the state object.\r\n  **/\r\n  function getState() {\r\n    var map = {};\r\n    for (var key in groups) {\r\n      if (groups.hasOwnProperty(key)) {\r\n        var group = groups[key];\r\n        \r\n        var groupElements = [];\r\n        var el = group.element;\r\n        if (el && el.children) {\r\n          var children = el.children;\r\n          for (var i = 0, len = children.length; i < len; i++) {\r\n            var child = children[i];\r\n            var data = { };\r\n            if (isElementRegistered(child)) {\r\n              data.type = REGISTERED;\r\n              data.uniqueId = getRegisteredElementUniqueId(child);\r\n            } else {\r\n              data.type = NONREGISTERED;\r\n              data.uniqueId = getReferencedUniqueId(child, referenceState) || getElementUniqueId(child);\r\n            }\r\n            groupElements.push(data);\r\n          }\r\n        }\r\n        map[key] = groupElements;\r\n      }\r\n    }\r\n    return map;\r\n  }\r\n  \r\n  /**\r\n  * Set the state.\r\n  *\r\n  * @static\r\n  * @method setState\r\n  * @param {Object} state The state to be applied.\r\n  **/\r\n  function setState(state) {\r\n    utils.each(state, function(groupId, elements){\r\n      if (!groups[groupId]) con.warn(\"Group \" + groupId + \" does not exist!\");\r\n      \r\n      var group = groups[groupId];\r\n      for (var i = 0, len = elements.length; i < len; i++) {\r\n        var element = elements[i];\r\n        var el = null;\r\n        if (element.type === REGISTERED) {\r\n          el = getRegisteredElementByUniqueId(element.uniqueId);\r\n        } else if (element.type === NONREGISTERED) {\r\n          el = getReferencedElement(element.uniqueId, referenceState) || getElementByUniqueId(element.uniqueId);\r\n        }\r\n        \r\n        if (el !== null) {\r\n          if (el.parentNode) {\r\n            el.parentNode.removeChild(el);\r\n          }\r\n          \r\n          group.element.appendChild(el);\r\n        } else {\r\n          con.warn(\"Unknown element in settings\", element);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n  * Enable/disable the drag \'n\' drop.\r\n  *\r\n  * @static\r\n  * @method setMoveable\r\n  * @param {Boolean} enabled Whether the drag \'n\' drop should be enabled.\r\n  **/\r\n  function setMoveable(enabled) {\r\n    dragdrop.setGroupElements(getGroupElements());\r\n    dragdrop.setEnabled(enabled);\r\n  }\r\n  \r\n  /**\r\n  * Get every registered element in every group.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method getGroupElements\r\n  * @return {HTMLElement[]} Returns every registered element in every registered group.\r\n  **/\r\n  function getGroupElements() {\r\n    var groupElements = [];\r\n    for (var key in groups) {\r\n      if (groups.hasOwnProperty(key)) {\r\n        groupElements.push(groups[key].element);\r\n      }\r\n    }\r\n    return groupElements;\r\n  }\r\n  \r\n  /**\r\n  * Clear every registered group and registered elements.\r\n  *\r\n  * @static\r\n  * @method clearGroups\r\n  **/\r\n  function clearGroups() {\r\n    groups = {};\r\n  }\r\n  \r\n  /**\r\n  * Set the reference state.\r\n  *\r\n  * @static\r\n  * @method setReferenceState\r\n  * @param {Object} state The reference state.\r\n  **/\r\n  function setReferenceState(state) {\r\n    referenceState = state;\r\n  }\r\n  \r\n  /**\r\n  * Initialize the reference state and move elements.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method init\r\n  **/\r\n  function init() {\r\n    setReferenceState(createReferenceState());\r\n    \r\n    \r\n  }\r\n  \r\n  /**\r\n  * Value given to registered elements.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property REGISTERED\r\n  * @type {Number}\r\n  * @default 0\r\n  **/\r\n  var REGISTERED = 0;\r\n  \r\n  /**\r\n  * Value given to not registered elements.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property NONREGISTERED\r\n  * @type {Number}\r\n  * @default 1\r\n  **/\r\n  var NONREGISTERED = 1;\r\n  \r\n  /**\r\n  * The registered groups and its registered element children\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property groups\r\n  * @type {Object}\r\n  **/\r\n  var groups = {};\r\n  \r\n  /**\r\n  * The reference state.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property referenceState\r\n  * @type {Object}\r\n  **/\r\n  var referenceState = null;\r\n  \r\n  pageload.addEventListener(\"interactive\", init);\r\n  \r\n  /* Make the API public */\r\n  exports.setMoveable = setMoveable;\r\n  exports.addElement = addElement;\r\n  exports.createGroup = createGroup;\r\n  exports.getState = getState;\r\n  exports.setState = setState;\r\n  exports.createReferenceState = createReferenceState;\r\n  exports.setReferenceState = setReferenceState;\r\n  exports.clearGroups = clearGroups;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/element-placement.js");

eval("/**\r\n* A group module for the element-placment module.\r\n*\r\n* @class SentimentActions\r\n**/\r\ndefine(\'element-placement/watch8-ytcenter-buttons\',[\"exports\", \"../element-placement\", \"../utils\", \"../pageload\"], function(exports, placement, utils, pageload){\r\n  function onInteractive() {\r\n    // Create the group element\r\n    var element = document.createElement(\"div\");\r\n    element.setAttribute(\"id\", id);\r\n    \r\n    var parentElement = document.getElementById(\"watch8-action-buttons\");\r\n    if (parentElement) {\r\n      if (parentElement.children.length === 0) {\r\n        parentElement.appendChild(element);\r\n      } else {\r\n        parentElement.insertBefore(element, parentElement.children[0]);\r\n      }\r\n    }\r\n    \r\n    // Create the group\r\n    placement.createGroup(id, element);\r\n    \r\n    // Make sure that elements are no more added to the buffer\r\n    groupCreated = true;\r\n    \r\n    // Add buffered elements to the group\r\n    if (groupBuffer.length > 0) {\r\n      for (var i = 0, len = groupBuffer.length; i < len; i++) {\r\n        placement.addElement(id, groupBuffer[i][0], groupBuffer[i][1]); // Adding the element to the group\r\n      }\r\n      groupBuffer = []; // Remove reference for every buffered element.\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Add an element to the group.\r\n  *\r\n  * @static\r\n  * @method addElement\r\n  * @param {String} id An unique id for the element\r\n  * @param {HTMLElement} el A HTMLElement that will be added to the group.\r\n  **/\r\n  function addElement(uid, el) {\r\n    if (groupCreated) {\r\n      placement.addElement(id, uid, el);\r\n    } else {\r\n      groupBuffer.push([ uid, el ]);\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * The id of the group.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property id\r\n  * @type String\r\n  * @readOnly\r\n  **/\r\n  var id = \"watch8-ytcenter-buttons\";\r\n  \r\n  /**\r\n  * Indicates whether the group has been created yet.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property groupCreated\r\n  * @type Boolean\r\n  **/\r\n  var groupCreated = false;\r\n  \r\n  /**\r\n  * The buffered element.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property groupBuffer\r\n  * @type HTMLElement[]\r\n  **/\r\n  var groupBuffer = [];\r\n  \r\n  // Make sure that the group is created when the page has loaded every DOM element.\r\n  pageload.addEventListener(\"interactive\", onInteractive);\r\n  \r\n  exports.addElement = addElement;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/element-placement/watch8-ytcenter-buttons.js");

eval("define(\'css\',[\"exports\", \"./console\"], function(exports, con){\r\n  function isCSSElementEnabled(id) {\r\n    for (var i = 0, len = enabledCSSElements.length; i < len; i++) {\r\n      if (enabledCSSElements[i] === id) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n  \r\n  function createCSSElement(id) {\r\n    var el = document.createElement(\"style\");\r\n    el.setAttribute(\"id\", prefix + id);\r\n    el.setAttribute(\"type\", \"text\\/css\");\r\n    el.appendChild(document.createTextNode(cssObject[id]));\r\n    \r\n    return el;\r\n  }\r\n  \r\n  function appendCSSElement(id) {\r\n    var el = cssElements[id];\r\n    removeChildFromParent(el);\r\n    \r\n    if (document && document.body) {\r\n      document.body.appendChild(el);\r\n    } else if (document && document.head) {\r\n      document.head.appendChild(el);\r\n    } else if (document && document.documentElement) {\r\n      document.documentElement.appendChild(el);\r\n    } else if (document) {\r\n      document.appendChild(el);\r\n    } else {\r\n      con.error(\"Browser document not found.\");\r\n    }\r\n  }\r\n  \r\n  function removeChildFromParent(el) {\r\n    if (el.parentNode) {\r\n      el.parentNode.removeChild(el);\r\n    }\r\n  }\r\n  \r\n  function setCSSElementEnabled(id, enabled) {\r\n    if (!cssObject.hasOwnProperty(id)) {\r\n      con.error(\"CSS Element \" + id + \" was not registered, make sure that it wasn\'t misspelled!\");\r\n      return;\r\n    }\r\n    \r\n    var pos = isCSSElementEnabled(id);\r\n    if (enabled) {\r\n      if (pos === -1) {\r\n        enabledCSSElements.push(id);\r\n        if (!cssElements[id]) {\r\n          cssElements[id] = createCSSElement(id);\r\n        }\r\n        appendCSSElement(id);\r\n      }\r\n    } else {\r\n      if (pos !== -1) {\r\n        enabledCSSElements.splice(pos, 1);\r\n        removeChildFromParent(cssElements[id]);\r\n      }\r\n    }\r\n  }\r\n  \r\n  var prefix = \"ytcenter-\";\r\n  \r\n  var cssObject = {\"yt-uix\":\".ytcenter-uix-button-toggled{border-color:#c6c6c6!important;background-color:#e9e9e9!important;-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,.2)!important;-ms-box-shadow:inset 0 1px 1px rgba(0,0,0,.2)!important;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.2)!important;box-shadow:inset 0 1px 1px rgba(0,0,0,.2)!important;filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr=#fff8f8f8, EndColorStr=#ffeeeeee)!important;background-image:-moz-linear-gradient(top,#f8f8f8 0,#eee 100%)!important;background-image:-ms-linear-gradient(top,#f8f8f8 0,#eee 100%)!important;background-image:-o-linear-gradient(top,#f8f8f8 0,#eee 100%)!important;background-image:-webkit-gradient(linear,left top,left bottom,color-stop(0,#f8f8f8),color-stop(100%,#eee))!important;background-image:-webkit-linear-gradient(top,#f8f8f8 0,#eee 100%)!important;background-image:linear-gradient(to bottom,#f8f8f8 0,#eee 100%)!important}\"};\r\n  var cssElements = {};\r\n  var enabledCSSElements = [];\r\n  \r\n  exports.setEnabled = setCSSElementEnabled;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/css.js");

eval("define(\'buttons/repeat\',[\"exports\", \"../utils\", \"../player/listeners\", \"../player/player\", \"../element-placement/watch8-ytcenter-buttons\", \"../css\"], function(exports, utils, listener, player, group, css){\r\n  function createButton() {\r\n    var btn = document.createElement(\"button\");\r\n    btn.setAttribute(\"type\", \"button\");\r\n    btn.setAttribute(\"role\", \"button\");\r\n    btn.setAttribute(\"onclick\", \";return false;\");\r\n    btn.setAttribute(\"title\", \"Toggle repeat\");\r\n    btn.setAttribute(\"data-tooltip-text\", \"Toggle repeat\");\r\n    btn.className = \"yt-uix-button yt-uix-tooltip yt-uix-button-opacity\";\r\n    \r\n    var text = document.createElement(\"span\");\r\n    text.className = \"yt-uix-button-content\";\r\n    text.textContent = \"Repeat\";\r\n    \r\n    btn.appendChild(text);\r\n    \r\n    btn.addEventListener(\"click\", toggleRepeat, false);\r\n    return btn;\r\n  }\r\n  \r\n  function toggleRepeat(e) {\r\n    repeat = !repeat;\r\n    \r\n    if (repeat) {\r\n      utils.removeClass(repeatButton, \"yt-uix-button-opacity\");\r\n      utils.addClass(repeatButton, \"ytcenter-uix-button-toggled\");\r\n    } else {\r\n      utils.addClass(repeatButton, \"yt-uix-button-opacity\");\r\n      utils.removeClass(repeatButton, \"ytcenter-uix-button-toggled\");\r\n    }\r\n  }\r\n  \r\n  function onStateChange(state) {\r\n    if (state === 0 && repeat) {\r\n      player.api.playVideo();\r\n    }\r\n  }\r\n  \r\n  function getButton() {\r\n    return repeatButton;\r\n  }\r\n  \r\n  var repeat = false;\r\n  var repeatButton = createButton();\r\n  \r\n  group.addElement(\"/*should probably have a guid here*/\", repeatButton);\r\n  \r\n  listener.addEventListener(\"onStateChange\", onStateChange);\r\n  \r\n  css.setEnabled(\"yt-uix\", true);\r\n  \r\n  exports.getButton = getButton;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/buttons/repeat.js");

eval("define(\'main\',[\"buttons/repeat\"], function(repeatButton){\r\n  \r\n});\n//# sourceURL=/main.js");


require(["main"]);
}());
//# sourceMappingURL=data:application/json;base64,
}
(function () {eval("/**\r\n * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/jrburke/almond for details\r\n */\r\n//Going sloppy to avoid \'use strict\' string cost, but strict practices should\r\n//be followed.\r\n/*jslint sloppy: true */\r\n/*global setTimeout: false */\r\n\r\nvar requirejs, require, define;\r\n(function (undef) {\r\n    var main, req, makeMap, handlers,\r\n        defined = {},\r\n        waiting = {},\r\n        config = {},\r\n        defining = {},\r\n        hasOwn = Object.prototype.hasOwnProperty,\r\n        aps = [].slice,\r\n        jsSuffixRegExp = /\\.js$/;\r\n\r\n    function hasProp(obj, prop) {\r\n        return hasOwn.call(obj, prop);\r\n    }\r\n\r\n    /**\r\n     * Given a relative module name, like ./something, normalize it to\r\n     * a real name that can be mapped to a path.\r\n     * @param {String} name the relative name\r\n     * @param {String} baseName a real name that the name arg is relative\r\n     * to.\r\n     * @returns {String} normalized name\r\n     */\r\n    function normalize(name, baseName) {\r\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\r\n            foundI, foundStarMap, starI, i, j, part,\r\n            baseParts = baseName && baseName.split(\"/\"),\r\n            map = config.map,\r\n            starMap = (map && map[\'*\']) || {};\r\n\r\n        //Adjust any relative paths.\r\n        if (name && name.charAt(0) === \".\") {\r\n            //If have a base name, try to normalize against it,\r\n            //otherwise, assume it is a top-level require that will\r\n            //be relative to baseUrl in the end.\r\n            if (baseName) {\r\n                //Convert baseName to array, and lop off the last part,\r\n                //so that . matches that \"directory\" and not name of the baseName\'s\r\n                //module. For instance, baseName of \"one/two/three\", maps to\r\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\r\n                //this normalization.\r\n                baseParts = baseParts.slice(0, baseParts.length - 1);\r\n                name = name.split(\'/\');\r\n                lastIndex = name.length - 1;\r\n\r\n                // Node .js allowance:\r\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\r\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, \'\');\r\n                }\r\n\r\n                name = baseParts.concat(name);\r\n\r\n                //start trimDots\r\n                for (i = 0; i < name.length; i += 1) {\r\n                    part = name[i];\r\n                    if (part === \".\") {\r\n                        name.splice(i, 1);\r\n                        i -= 1;\r\n                    } else if (part === \"..\") {\r\n                        if (i === 1 && (name[2] === \'..\' || name[0] === \'..\')) {\r\n                            //End of the line. Keep at least one non-dot\r\n                            //path segment at the front so it can be mapped\r\n                            //correctly to disk. Otherwise, there is likely\r\n                            //no path mapping for a path starting with \'..\'.\r\n                            //This can still fail, but catches the most reasonable\r\n                            //uses of ..\r\n                            break;\r\n                        } else if (i > 0) {\r\n                            name.splice(i - 1, 2);\r\n                            i -= 2;\r\n                        }\r\n                    }\r\n                }\r\n                //end trimDots\r\n\r\n                name = name.join(\"/\");\r\n            } else if (name.indexOf(\'./\') === 0) {\r\n                // No baseName, so this is ID is resolved relative\r\n                // to baseUrl, pull off the leading dot.\r\n                name = name.substring(2);\r\n            }\r\n        }\r\n\r\n        //Apply map config if available.\r\n        if ((baseParts || starMap) && map) {\r\n            nameParts = name.split(\'/\');\r\n\r\n            for (i = nameParts.length; i > 0; i -= 1) {\r\n                nameSegment = nameParts.slice(0, i).join(\"/\");\r\n\r\n                if (baseParts) {\r\n                    //Find the longest baseName segment match in the config.\r\n                    //So, do joins on the biggest to smallest lengths of baseParts.\r\n                    for (j = baseParts.length; j > 0; j -= 1) {\r\n                        mapValue = map[baseParts.slice(0, j).join(\'/\')];\r\n\r\n                        //baseName segment has  config, find if it has one for\r\n                        //this name.\r\n                        if (mapValue) {\r\n                            mapValue = mapValue[nameSegment];\r\n                            if (mapValue) {\r\n                                //Match, update name to the new value.\r\n                                foundMap = mapValue;\r\n                                foundI = i;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (foundMap) {\r\n                    break;\r\n                }\r\n\r\n                //Check for a star map match, but just hold on to it,\r\n                //if there is a shorter segment match later in a matching\r\n                //config, then favor over this star map.\r\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\r\n                    foundStarMap = starMap[nameSegment];\r\n                    starI = i;\r\n                }\r\n            }\r\n\r\n            if (!foundMap && foundStarMap) {\r\n                foundMap = foundStarMap;\r\n                foundI = starI;\r\n            }\r\n\r\n            if (foundMap) {\r\n                nameParts.splice(0, foundI, foundMap);\r\n                name = nameParts.join(\'/\');\r\n            }\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    function makeRequire(relName, forceSync) {\r\n        return function () {\r\n            //A version of a require function that passes a moduleName\r\n            //value for items that may need to\r\n            //look up paths relative to the moduleName\r\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\r\n        };\r\n    }\r\n\r\n    function makeNormalize(relName) {\r\n        return function (name) {\r\n            return normalize(name, relName);\r\n        };\r\n    }\r\n\r\n    function makeLoad(depName) {\r\n        return function (value) {\r\n            defined[depName] = value;\r\n        };\r\n    }\r\n\r\n    function callDep(name) {\r\n        if (hasProp(waiting, name)) {\r\n            var args = waiting[name];\r\n            delete waiting[name];\r\n            defining[name] = true;\r\n            main.apply(undef, args);\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\r\n            throw new Error(\'No \' + name);\r\n        }\r\n        return defined[name];\r\n    }\r\n\r\n    //Turns a plugin!resource to [plugin, resource]\r\n    //with the plugin being undefined if the name\r\n    //did not have a plugin prefix.\r\n    function splitPrefix(name) {\r\n        var prefix,\r\n            index = name ? name.indexOf(\'!\') : -1;\r\n        if (index > -1) {\r\n            prefix = name.substring(0, index);\r\n            name = name.substring(index + 1, name.length);\r\n        }\r\n        return [prefix, name];\r\n    }\r\n\r\n    /**\r\n     * Makes a name map, normalizing the name, and using a plugin\r\n     * for normalization if necessary. Grabs a ref to plugin\r\n     * too, as an optimization.\r\n     */\r\n    makeMap = function (name, relName) {\r\n        var plugin,\r\n            parts = splitPrefix(name),\r\n            prefix = parts[0];\r\n\r\n        name = parts[1];\r\n\r\n        if (prefix) {\r\n            prefix = normalize(prefix, relName);\r\n            plugin = callDep(prefix);\r\n        }\r\n\r\n        //Normalize according\r\n        if (prefix) {\r\n            if (plugin && plugin.normalize) {\r\n                name = plugin.normalize(name, makeNormalize(relName));\r\n            } else {\r\n                name = normalize(name, relName);\r\n            }\r\n        } else {\r\n            name = normalize(name, relName);\r\n            parts = splitPrefix(name);\r\n            prefix = parts[0];\r\n            name = parts[1];\r\n            if (prefix) {\r\n                plugin = callDep(prefix);\r\n            }\r\n        }\r\n\r\n        //Using ridiculous property names for space reasons\r\n        return {\r\n            f: prefix ? prefix + \'!\' + name : name, //fullName\r\n            n: name,\r\n            pr: prefix,\r\n            p: plugin\r\n        };\r\n    };\r\n\r\n    function makeConfig(name) {\r\n        return function () {\r\n            return (config && config.config && config.config[name]) || {};\r\n        };\r\n    }\r\n\r\n    handlers = {\r\n        require: function (name) {\r\n            return makeRequire(name);\r\n        },\r\n        exports: function (name) {\r\n            var e = defined[name];\r\n            if (typeof e !== \'undefined\') {\r\n                return e;\r\n            } else {\r\n                return (defined[name] = {});\r\n            }\r\n        },\r\n        module: function (name) {\r\n            return {\r\n                id: name,\r\n                uri: \'\',\r\n                exports: defined[name],\r\n                config: makeConfig(name)\r\n            };\r\n        }\r\n    };\r\n\r\n    main = function (name, deps, callback, relName) {\r\n        var cjsModule, depName, ret, map, i,\r\n            args = [],\r\n            callbackType = typeof callback,\r\n            usingExports;\r\n\r\n        //Use name if no relName\r\n        relName = relName || name;\r\n\r\n        //Call the callback to define the module, if necessary.\r\n        if (callbackType === \'undefined\' || callbackType === \'function\') {\r\n            //Pull out the defined dependencies and pass the ordered\r\n            //values to the callback.\r\n            //Default to [require, exports, module] if no deps\r\n            deps = !deps.length && callback.length ? [\'require\', \'exports\', \'module\'] : deps;\r\n            for (i = 0; i < deps.length; i += 1) {\r\n                map = makeMap(deps[i], relName);\r\n                depName = map.f;\r\n\r\n                //Fast path CommonJS standard dependencies.\r\n                if (depName === \"require\") {\r\n                    args[i] = handlers.require(name);\r\n                } else if (depName === \"exports\") {\r\n                    //CommonJS module spec 1.1\r\n                    args[i] = handlers.exports(name);\r\n                    usingExports = true;\r\n                } else if (depName === \"module\") {\r\n                    //CommonJS module spec 1.1\r\n                    cjsModule = args[i] = handlers.module(name);\r\n                } else if (hasProp(defined, depName) ||\r\n                           hasProp(waiting, depName) ||\r\n                           hasProp(defining, depName)) {\r\n                    args[i] = callDep(depName);\r\n                } else if (map.p) {\r\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\r\n                    args[i] = defined[depName];\r\n                } else {\r\n                    throw new Error(name + \' missing \' + depName);\r\n                }\r\n            }\r\n\r\n            ret = callback ? callback.apply(defined[name], args) : undefined;\r\n\r\n            if (name) {\r\n                //If setting exports via \"module\" is in play,\r\n                //favor that over return value and exports. After that,\r\n                //favor a non-undefined return value over exports use.\r\n                if (cjsModule && cjsModule.exports !== undef &&\r\n                        cjsModule.exports !== defined[name]) {\r\n                    defined[name] = cjsModule.exports;\r\n                } else if (ret !== undef || !usingExports) {\r\n                    //Use the return value from the function.\r\n                    defined[name] = ret;\r\n                }\r\n            }\r\n        } else if (name) {\r\n            //May just be an object definition for the module. Only\r\n            //worry about defining if have a module name.\r\n            defined[name] = callback;\r\n        }\r\n    };\r\n\r\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\r\n        if (typeof deps === \"string\") {\r\n            if (handlers[deps]) {\r\n                //callback in this case is really relName\r\n                return handlers[deps](callback);\r\n            }\r\n            //Just return the module wanted. In this scenario, the\r\n            //deps arg is the module name, and second arg (if passed)\r\n            //is just the relName.\r\n            //Normalize module name, if it contains . or ..\r\n            return callDep(makeMap(deps, callback).f);\r\n        } else if (!deps.splice) {\r\n            //deps is a config object, not an array.\r\n            config = deps;\r\n            if (config.deps) {\r\n                req(config.deps, config.callback);\r\n            }\r\n            if (!callback) {\r\n                return;\r\n            }\r\n\r\n            if (callback.splice) {\r\n                //callback is an array, which means it is a dependency list.\r\n                //Adjust args if there are dependencies\r\n                deps = callback;\r\n                callback = relName;\r\n                relName = null;\r\n            } else {\r\n                deps = undef;\r\n            }\r\n        }\r\n\r\n        //Support require([\'a\'])\r\n        callback = callback || function () {};\r\n\r\n        //If relName is a function, it is an errback handler,\r\n        //so remove it.\r\n        if (typeof relName === \'function\') {\r\n            relName = forceSync;\r\n            forceSync = alt;\r\n        }\r\n\r\n        //Simulate async callback;\r\n        if (forceSync) {\r\n            main(undef, deps, callback, relName);\r\n        } else {\r\n            //Using a non-zero value because of concern for what old browsers\r\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\r\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\r\n            //If want a value immediately, use require(\'id\') instead -- something\r\n            //that works in almond on the global level, but not guaranteed and\r\n            //unlikely to work in other AMD implementations.\r\n            setTimeout(function () {\r\n                main(undef, deps, callback, relName);\r\n            }, 4);\r\n        }\r\n\r\n        return req;\r\n    };\r\n\r\n    /**\r\n     * Just drops the config on the floor, but returns req in case\r\n     * the config return value is used.\r\n     */\r\n    req.config = function (cfg) {\r\n        return req(cfg);\r\n    };\r\n\r\n    /**\r\n     * Expose module registry for debugging and tooling\r\n     */\r\n    requirejs._defined = defined;\r\n\r\n    define = function (name, deps, callback) {\r\n\r\n        //This module may not have dependencies\r\n        if (!deps.splice) {\r\n            //deps is not an array, so probably means\r\n            //an object literal or factory function for\r\n            //the value. Adjust args.\r\n            callback = deps;\r\n            deps = [];\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\r\n            waiting[name] = [name, deps, callback];\r\n        }\r\n    };\r\n\r\n    define.amd = {\r\n        jQuery: true\r\n    };\r\n}());\r\n\n//# sourceURL=/../vendor/almond.js");

define("../vendor/almond", function(){});

eval("define(\'unsafeWindow\',[], function(){\r\n  return window;\r\n});\n//# sourceURL=/unsafeWindow.js");

eval("/**\r\n* A helper class to help checking for features that are supported by the browser.\r\n* @namespace helper\r\n* @class Support\r\n**/\r\ndefine(\'helper/support\',[\"exports\", \"unsafeWindow\"], function(exports, uw){\r\n  /**\r\n  * Performing a simple LocalStorage set, get test.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @method localStorageTest\r\n  * @return {Boolean} Returns true if LocalStorage is supported otherwise returns false.\r\n  **/\r\n  function localStorageTest() {\r\n    var mod = \"support.test\";\r\n    try {\r\n      localStorage.setItem(mod, mod);\r\n      localStorage.removeItem(mod);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Checking if `webkitURL` is an object.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property isWebkitURL\r\n  * @type Boolean\r\n  **/\r\n  var isWebkitURL = typeof uw.webkitURL === \"object\";\r\n  \r\n  /**\r\n  * Checking if `URL` is an object.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property isURL\r\n  * @type Boolean\r\n  **/\r\n  var isURL = typeof uw.URL === \"object\";\r\n  \r\n  /**\r\n  * Checking if Maxthon runtime is accessible.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property maxthonRuntime\r\n  * @type Boolean\r\n  **/\r\n  var maxthonRuntime = window && window.external && window.external.mxGetRuntime && typeof window.external.mxGetRuntime === \"function\";\r\n  \r\n  /**\r\n  * Checking if `createObjectURL` is supported.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property isCreateObjectURL\r\n  * @type Boolean\r\n  **/\r\n  var isCreateObjectURL = false;\r\n  \r\n  /**\r\n  * Checking if `revokeObjectURL` is supported.\r\n  *\r\n  * @private\r\n  * @static\r\n  * @property isRevokeObjectURL\r\n  * @type Boolean\r\n  **/\r\n  var isRevokeObjectURL = false;\r\n  if (isWebkitURL) {\r\n    isCreateObjectURL = typeof uw.webkitURL.createObjectURL === \"function\";\r\n    isRevokeObjectURL = typeof uw.webkitURL.revokeObjectURL === \"function\";\r\n  } else if (isURL) {\r\n    isCreateObjectURL = typeof uw.URL.createObjectURL === \"function\";\r\n    isRevokeObjectURL = typeof uw.URL.revokeObjectURL === \"function\";\r\n  }\r\n  \r\n  /**\r\n  * Checking if LocalStorage is supported.\r\n  *\r\n  * @static\r\n  * @property localStorage\r\n  * @type Boolean\r\n  **/\r\n  exports.localStorage = localStorageTest();\r\n  \r\n  /**\r\n  * Checking if the Greasemonkey API is supported.\r\n  *\r\n  * @static\r\n  * @property Greasemonkey\r\n  * @type Boolean\r\n  **/\r\n  exports.Greasemonkey = (typeof GM_setValue !== \"undefined\" && (typeof GM_setValue.toString === \"undefined\" || GM_setValue.toString().indexOf(\"not supported\") === -1));\r\n  \r\n  /**\r\n  * Checking if `createObjectUR` is supported.\r\n  *\r\n  * @static\r\n  * @property createObjectURL\r\n  * @type Boolean\r\n  **/\r\n  exports.createObjectURL = isCreateObjectURL;\r\n  \r\n  /**\r\n  * Checking if `revokeObjectURL` is supported.\r\n  *\r\n  * @static\r\n  * @property revokeObjectURL\r\n  * @type Boolean\r\n  **/\r\n  exports.revokeObjectURL = isRevokeObjectURL;\r\n  \r\n  /**\r\n  * Checking if the `webkitURL` object is supported.\r\n  *\r\n  * @static\r\n  * @property webkitURL\r\n  * @type Boolean\r\n  **/\r\n  exports.webkitURL = isWebkitURL;\r\n  \r\n  /**\r\n  * Checking if the `URL` object is supported.\r\n  *\r\n  * @static\r\n  * @property URL\r\n  * @type Boolean\r\n  **/\r\n  exports.URL = isURL;\r\n  \r\n  /**\r\n  * Checking if Maxthon runtime is supported.\r\n  *\r\n  * @static\r\n  * @property maxthonRuntime\r\n  * @type Boolean\r\n  **/\r\n  exports.maxthonRuntime = maxthonRuntime;\r\n  \r\n  /**\r\n  * Checking if Maxthon runtime Storage object is supported.\r\n  *\r\n  * @static\r\n  * @property maxthonRuntimeStorage\r\n  * @type Boolean\r\n  **/\r\n  exports.maxthonRuntimeStorage = maxthonRuntime && window.external.mxGetRuntime() && window.external.mxGetRuntime().storage;\r\n  \r\n  /**\r\n  * Checking if Firefox extension port is accessible.\r\n  *\r\n  * @static\r\n  * @property firefoxPort\r\n  * @type Boolean\r\n  **/\r\n  exports.firefoxPort = this.port && typeof this.port.request === \"function\" && this.port.storage && typeof this.port.on === \"function\";\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/helper/support.js");

eval("/**\r\n* @class Utils\r\n**/\r\ndefine(\'utils\',[\"exports\", \"./helper/support\", \"unsafeWindow\"], function(exports, support, uw){\r\n  function each(obj, callback) {\r\n    if (isArray(obj)) {\r\n      for (var i = 0; i < obj.length; i++) {\r\n        if (callback(i, obj[i]) === true) break;\r\n      }\r\n    } else {\r\n      for (var key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n          if (callback(key, obj[key]) === true) break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  function isArray(arr) {\r\n    return Object.prototype.toString.call(arr) === \"[object Array]\";\r\n  }\r\n  \r\n  function asyncCall(scope, callback) {\r\n    return setTimeout(bind.apply(null, [scope, callback].concat(Array.prototype.slice.call(arguments, 2))), 0);\r\n  }\r\n  \r\n  function bind(scope, func) {\r\n    var args = Array.prototype.slice.call(arguments, 2);\r\n    return function(){\r\n      return func.apply(scope, args.concat(Array.prototype.slice.call(arguments)))\r\n    };\r\n  }\r\n  \r\n  function trimLeft(obj){\r\n    return obj.replace(/^\\s+/, \"\");\r\n  }\r\n  \r\n  function trimRight(obj){\r\n    return obj.replace(/\\s+$/, \"\");\r\n  }\r\n  \r\n  function map(obj, callback, thisArg) {\r\n    for (var i = 0, n = obj.length, a = []; i < n; i++) {\r\n      if (i in obj) a[i] = callback.call(thisArg, obj[i]);\r\n    }\r\n    return a;\r\n  }\r\n  \r\n  /**\r\n  * Define a property with a getter and a setter.\r\n  *\r\n  * @method defineProperty\r\n  * @param {Object} obj The object where the property resides in.\r\n  * @param {String} key The name of the property.\r\n  * @param {Function} get The getter function.\r\n  * @param {Function} set The setter function.\r\n  **/\r\n  function defineProperty(obj, key, get, set) {\r\n    if (Object && typeof Object.defineProperty === \"function\") {\r\n      Object.defineProperty(obj, key, {\r\n        \"get\": get,\r\n        \"set\": set\r\n      });\r\n    } else {\r\n      obj.__defineGetter__(key, get);\r\n      obj.__defineSetter__(key, set);\r\n    }\r\n  }\r\n  \r\n  function defineLockedProperty(obj, key, setter, getter) {\r\n    if (typeof obj !== \"object\") obj = {};\r\n    if (support.ie || typeof Object.defineProperty === \"function\") {\r\n      Object.defineProperty(obj, key, {\r\n        get: getter,\r\n        set: setter\r\n      });\r\n      return obj;\r\n    } else {\r\n      obj.__defineGetter__(key, getter);\r\n      obj.__defineSetter__(key, setter);\r\n      return obj;\r\n    }\r\n  }\r\n  \r\n  function addEventListener(elm, event, callback, useCapture) {\r\n    if (elm.addEventListener) {\r\n      elm.addEventListener(event, callback, useCapture || false);\r\n    } else if (elm.attachEvent) {\r\n      elm.attachEvent(\"on\" + event, callback);\r\n    }\r\n  }\r\n  \r\n  function removeEventListener(elm, event, callback, useCapture) {\r\n    if (elm.removeEventListener) {\r\n      elm.removeEventListener(event, callback, useCapture || false);\r\n    } else if (elm.detachEvent) {\r\n      elm.detachEvent(\"on\" + event, callback);\r\n    }\r\n  }\r\n  \r\n  var now = Date.now || function () {\r\n    return +new Date;\r\n  };\r\n  \r\n  /* Cookies */\r\n  function setCookie(name, value, domain, path, expires) {\r\n    domain = domain ? \";domain=\" + encodeURIComponent(domain) : \"\";\r\n    path = path ? \";path=\" + encodeURIComponent(path) : \"\";\r\n    expires = 0 > expires ? \"\" : 0 == expires ? \";expires=\" + (new Date(1970, 1, 1)).toUTCString() : \";expires=\" + (new Date(now() + 1E3 * expires)).toUTCString();\r\n    \r\n    document.cookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value) + domain + path + expires;\r\n  }\r\n  \r\n  function getCookie(key) {\r\n    return getCookies()[key];\r\n  }\r\n  \r\n  function getCookies() {\r\n    var c = document.cookie, v = 0, cookies = {};\r\n    if (document.cookie.match(/^\\s*\\$Version=(?:\"1\"|1);\\s*(.*)/)) {\r\n      c = RegExp.$1;\r\n      v = 1;\r\n    }\r\n    if (v === 0) {\r\n      map(c.split(/[,;]/), function(cookie) {\r\n        var parts = cookie.split(/=/, 2),\r\n            name = decodeURIComponent(trimLeft(parts[0])),\r\n            value = parts.length > 1 ? decodeURIComponent(trimRight(parts[1])) : null;\r\n        cookies[name] = value;\r\n      });\r\n    } else {\r\n      map(c.match(/(?:^|\\s+)([!#$%&\'*+\\-.0-9A-Z^`a-z|~]+)=([!#$%&\'*+\\-.0-9A-Z^`a-z|~]*|\"(?:[\\x20-\\x7E\\x80\\xFF]|\\\\[\\x00-\\x7F])*\")(?=\\s*[,;]|$)/g), function($0, $1) {\r\n        var name = $0, value = $1.charAt(0) === \'\"\' ? $1.substr(1, -1).replace(/\\\\(.)/g, \"$1\") : $1;\r\n        cookies[name] = value;\r\n      });\r\n    }\r\n    return cookies;\r\n  }\r\n  \r\n  function endsWith(str, suffix) {\r\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n  }\r\n  \r\n  function inject(func) {\r\n    var script = document.createElement(\"script\"),\r\n        p = (document.body || document.head || document.documentElement);\r\n    if (!p) {\r\n      throw \"Could not inject!!!\";\r\n    }\r\n    script.setAttribute(\"type\", \"text/javascript\");\r\n    script.appendChild(document.createTextNode(\"(\" + func + \")(\" + buildArgumentList.apply(null, [false].concat(Array.prototype.slice.call(arguments, 1))) + \");\"));\r\n    p.appendChild(script);\r\n    p.removeChild(script);\r\n  }\r\n  \r\n  function buildArgumentList(wrap) {\r\n    var list = [];\r\n    var args = Array.prototype.slice.call(arguments, 1);\r\n    \r\n    for (var i = 0, len = args.length; i < len; i++) {\r\n      if (typeof args[i] === \"string\") {\r\n        list.push(\"\\\"\" + args[i].replace(/\\\\/, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"\");\r\n      } else if (typeof args[i] === \"object\") {\r\n        list.push(JSON.stringify(args[i]));\r\n      } else if (typeof args[i] === \"undefined\") {\r\n        list.push(\"null\");\r\n      } else {\r\n        list.push(args[i]);\r\n      }\r\n    }\r\n    if (wrap) {\r\n      return \"(\" + list.join(\",\") + \")\";\r\n    } else {\r\n      return list.join(\",\");\r\n    }\r\n  }\r\n  \r\n  function isJSONString(json) {\r\n    try {\r\n      JSON.parse(json);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  function xhr(details) {\r\n    var xmlhttp;\r\n    if (typeof XMLHttpRequest !== \"undefined\") {\r\n      xmlhttp = new XMLHttpRequest();\r\n    } else if (typeof opera !== \"undefined\" && typeof opera.XMLHttpRequest !== \"undefined\") {\r\n      xmlhttp = new opera.XMLHttpRequest();\r\n    } else {\r\n      if (details[\"onerror\"]) {\r\n        details[\"onerror\"]();\r\n      }\r\n      \r\n      return;\r\n    }\r\n    xmlhttp.onreadystatechange = function(){\r\n      var responseState = {\r\n        responseXML:(xmlhttp.readyState == 4 ? xmlhttp.responseXML : \'\'),\r\n        responseText:(xmlhttp.readyState == 4 ? xmlhttp.responseText : \'\'),\r\n        readyState:xmlhttp.readyState,\r\n        responseHeaders:(xmlhttp.readyState == 4 ? xmlhttp.getAllResponseHeaders() : \'\'),\r\n        status:(xmlhttp.readyState == 4 ? xmlhttp.status : 0),\r\n        statusText:(xmlhttp.readyState == 4 ? xmlhttp.statusText : \'\'),\r\n        finalUrl:(xmlhttp.readyState == 4 ? xmlhttp.finalUrl : \'\')\r\n      };\r\n      if (details[\"onreadystatechange\"]) {\r\n        details[\"onreadystatechange\"](responseState);\r\n      }\r\n      if (xmlhttp.readyState == 4) {\r\n        if (details[\"onload\"] && xmlhttp.status >= 200 && xmlhttp.status < 300) {\r\n          details[\"onload\"](responseState);\r\n        }\r\n        if (details[\"onerror\"] && (xmlhttp.status < 200 || xmlhttp.status >= 300)) {\r\n          details[\"onerror\"](responseState);\r\n        }\r\n      }\r\n    };\r\n    try {\r\n      xmlhttp.open(details.method, details.url);\r\n    } catch(e) {\r\n      if(details[\"onerror\"]) {\r\n        details[\"onerror\"]({responseXML:\'\',responseText:\'\',readyState:4,responseHeaders:\'\',status:403,statusText:\'Forbidden\'});\r\n      }\r\n      return;\r\n    }\r\n    if (details.headers) {\r\n      for (var prop in details.headers) {\r\n        xmlhttp.setRequestHeader(prop, details.headers[prop]);\r\n      }\r\n    }\r\n    xmlhttp.send((typeof(details.data) != \'undefined\') ? details.data : null);\r\n  }\r\n  \r\n  // Used for the message module (should probably move to another place)\r\n  // It replaces a property in the obj to a predefined function, where the arguments will be callbackId, target, referer\r\n  function bindFunctionCallbacks(obj, func, target, referer) {\r\n    for (key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        if (typeof obj[key] === \"obj\") {\r\n          bindFunctionCallbacks(obj[key]);\r\n        } else if (typeof obj[key] === \"string\") {\r\n          if (obj[key].indexOf(\"@/(message.callback)/\") === 0) {\r\n            var callbackId = obj[key].split(\"@/(message.callback)/\")[1];\r\n            obj[key] = bind(null, func, callbackId, target, referer);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  function extend(obj, defaults, deep) {\r\n    if (typeof obj !== \"object\") throw new TypeError(\"Unsupported type for obj.\");\r\n    if (typeof defaults !== \"object\") throw new TypeError(\"Unsupported type for defaults.\");\r\n    \r\n    for (var key in defaults) {\r\n      if (defaults.hasOwnProperty(key)) {\r\n        if (typeof obj[key] === \"object\" && typeof defaults[key] === \"object\" && deep) {\r\n          extend(obj[key], defaults[key], deep);\r\n        } else if (!obj.hasOwnProperty(key)) {\r\n          obj[key] = defaults[key];\r\n        }\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n  \r\n  function inArray(key, arr) {\r\n    for (var i = 0, len = arr.length; i < len; i++) {\r\n      if (arr[i] === key) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  function listClasses(el) {\r\n    if (!el || !el.className) return [];\r\n    return el.className.split(\" \");\r\n  }\r\n  \r\n  function addClass(el, className) {\r\n    var classes = listClasses(el);\r\n    var addList = className.split(\" \");\r\n    \r\n    for (var i = 0, len = addList.length; i < len; i++) {\r\n      if (!inArray(addList[i], classes)) {\r\n        el.className += \" \" + addList[i];\r\n      }\r\n    }\r\n    return el.className;\r\n  }\r\n  \r\n  function removeClass(el, className) {\r\n    var classes = listClasses(el);\r\n    var removeList = className.split(\" \");\r\n    \r\n    var buffer = [];\r\n    for (var i = 0, len = classes.length; i < len; i++) {\r\n      if (!inArray(classes[i], removeList)) {\r\n        buffer.push(classes[i]);\r\n      }\r\n    }\r\n    return el.className = buffer.join(\" \");\r\n  }\r\n  \r\n  function hasClass(el, className) {\r\n    return inArray(className, listClasses(el));\r\n  }\r\n  \r\n  function throttle(func, delay, options){\r\n    function timeout() {\r\n      previous = options.leading === false ? 0 : new Date;\r\n      timer = null;\r\n      result = func.apply(context, args);\r\n    }\r\n    var context, args, result, timer = null, previous = 0;\r\n    options = options || {};\r\n    return function(){\r\n      var now = new Date, dt;\r\n      \r\n      context = this;\r\n      args = arguments;\r\n      \r\n      if (!previous && options.leading === false) previous = now;\r\n      dt = delay - (now - previous);\r\n      \r\n      if (dt <= 0) {\r\n        clearTimeout(timer);\r\n        timer = null;\r\n        previous = now;\r\n        result = func.apply(context, args);\r\n      } else if (!timer && options.trailing !== false) {\r\n        timer = setTimeout(timeout, dt);\r\n      }\r\n      return result;\r\n    };\r\n  }\r\n  \r\n  function clone(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n  }\r\n  \r\n  function removeDuplicates(arr) {\r\n    var uniqueArr = [];\r\n    for (var i = 0, len = arr.length; i < len; i++) {\r\n      if (!inArray(uniqueArr, arr[i])) {\r\n        uniqueArr.push(arr[i]);\r\n      }\r\n    }\r\n    \r\n    return uniqueArr;\r\n  }\r\n  \r\n  function escapeRegExp(str) {\r\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\r\n  }\r\n  \r\n  function toBlob(bytes, contentType) {\r\n    contentType = contentType || \"text/plain\";\r\n    var sliceSize = 512;\r\n    \r\n    var bytesLength = bytes.length;\r\n    var slicesCount = Math.ceil(bytesLength / sliceSize);\r\n    \r\n    var byteArrays = new Array(slicesCount);\r\n    \r\n    for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\r\n      var begin = sliceIndex * sliceSize;\r\n      var end = Math.min(begin + sliceSize, bytesLength);\r\n      \r\n      var sliceBytes = new Array(end - begin);\r\n      for (var offset = begin, i = 0 ; offset < end; ++i, ++offset) {\r\n        sliceBytes[i] = bytes[offset].charCodeAt(0);\r\n      }\r\n      byteArrays[sliceIndex] = new Uint8Array(sliceBytes);\r\n    }\r\n    \r\n    return new Blob(byteArrays, { type: contentType });\r\n  }\r\n  \r\n  function createObjectURL(blob) {\r\n    if (support.createObjectURL) {\r\n      if (support.webkitURL) {\r\n        return uw.webkitURL.createObjectURL(blob);\r\n      } else {\r\n        return uw.URL.createObjectURL(blob);\r\n      }\r\n    } else {\r\n      throw \"createObjectURL is not supported by the browser!\";\r\n    }\r\n  }\r\n  \r\n  function revokeObjectURL(url) {\r\n    if (support.revokeObjectURL) {\r\n      if (support.webkitURL) {\r\n        return uw.webkitURL.revokeObjectURL(url);\r\n      } else {\r\n        return uw.URL.revokeObjectURL(url);\r\n      }\r\n    } else {\r\n      throw \"revokeObjectURL is not supported by the browser!\";\r\n    }\r\n  }\r\n  \r\n  // Returns a random number between min and max\r\n  function getRandomArbitrary(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n  }\r\n  \r\n  // Returns a random integer between min (included) and max (excluded)\r\n  function getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n  \r\n  // Returns a random string of characters of chars with the length of length\r\n  function generateToken(chars, length) {\r\n    if (typeof chars !== \"string\") chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_\";\r\n    if (typeof length !== \"number\") length = 64;\r\n    \r\n    var charsLength = chars.length;\r\n    \r\n    var token = \"\";\r\n    for (var i = 0; i < length; i++) {\r\n      token += chars[getRandomInt(0, charsLength)];\r\n    }\r\n    \r\n    return token;\r\n  }\r\n  \r\n  function escapeECMAVariable(key, defaultKey) {\r\n    key = key.replace(/[^0-9a-zA-Z_\\$]/g, \"\");\r\n    while (/$[0-9]/g.test(key) && key.length > 0) {\r\n      if (key === \"\") return defaultKey;\r\n      key = key.substring(1);\r\n    }\r\n    return key;\r\n  }\r\n  \r\n  function indexOfArray(value, arr) {\r\n    for (var i = 0, len = arr.length; i < len; i++) {\r\n      if (arr[i] === value) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n  \r\n  function getKeys(obj) {\r\n    var keys = [];\r\n    each(obj, function(key){\r\n      keys.push(key);\r\n    });\r\n    return keys;\r\n  }\r\n  \r\n  function setProperty(target, path, value, createPath) {\r\n    var tokens = path.split(\".\");\r\n    for (var i = 0, len = tokens.length - 1; i < len; i++) {\r\n      if (target[tokens[i]]) {\r\n        target = target[tokens[i]];\r\n      } else {\r\n        if (createPath) {\r\n          target[tokens[i]] = {};\r\n          target = target[tokens[i]];\r\n        } else {\r\n          throw \"Path \" + path + \" does not exist for\", target;\r\n        }\r\n      }\r\n    }\r\n    target[tokens[tokens.length - 1]] = value;\r\n  }\r\n  \r\n  /**\r\n  * Replaces each format item in a specified string with the text equivalent of a corresponding object\'s value.\r\n  *\r\n  * @static\r\n  * @method format\r\n  * @param {String} format A composite format string that includes one or more format items.\r\n  * @param {any} [args]* The object to format.\r\n  * @return {String} The string with each format item inserted.\r\n  **/\r\n  /**\r\n  * Replaces each token in a specified string with the text equivalent of a corresponding key\'s value.\r\n  *\r\n  * @static\r\n  * @method format\r\n  * @param {String} format A composite format string that includes one or more token items.\r\n  * @param {Object} map The key, value pairs that will be replacing the tokens.\r\n  * @return {String} The formatted string.\r\n  **/\r\n  function format(format) {\r\n    if (arguments.length === 2 && typeof arguments[1] === \"object\") {\r\n      var map = arguments[1];\r\n      return format.replace(/\\${([\\w\\-\\_]+)}/g, function(match, key) { \r\n        return typeof map[key] !== \"undefined\" ? map[key] : match;\r\n      });\r\n    } else {\r\n      var args = Array.prototype.slice.call(arguments, 1);\r\n      return format.replace(/{(\\d+)}/g, function(match, index) { \r\n        return typeof args[index] !== \"undefined\" ? args[index] : match;\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * Calculate the absolute position of an element.\r\n  *\r\n  * @static\r\n  * @method getAbsolutePosition\r\n  * @param {HTMLElement} el The element.\r\n  * @return {Object} An object with the properties left and top\r\n  *                  where top and left tell the position of the\r\n  *                  element from the top-left corner in pixels.\r\n  **/\r\n  function getAbsolutePosition(el) {\r\n    var left = el.offsetLeft || 0;\r\n    var top = el.offsetTop || 0;\r\n    \r\n    if (el.offsetParent) {\r\n      var parentAbsolutePosition = getAbsolutePosition(el.offsetParent);\r\n      left += parentAbsolutePosition.left;\r\n      top += parentAbsolutePosition.top;\r\n    }\r\n    \r\n    return { left: left, top: top }; \r\n  }\r\n  \r\n  // Expose functions\r\n  exports.getAbsolutePosition = getAbsolutePosition;\r\n  exports.format = format;\r\n  exports.hasClass = hasClass;\r\n  exports.removeClass = removeClass;\r\n  exports.addClass = addClass;\r\n  exports.each = each;\r\n  exports.isArray = isArray;\r\n  exports.inArray = inArray;\r\n  exports.bind = bind;\r\n  exports.asyncCall = asyncCall;\r\n  exports.defineLockedProperty = defineLockedProperty;\r\n  exports.addEventListener = addEventListener;\r\n  exports.removeEventListener = removeEventListener;\r\n  exports.now = now;\r\n  exports.trimLeft = trimLeft;\r\n  exports.trimRight = trimRight;\r\n  exports.map = map;\r\n  exports.setCookie = setCookie;\r\n  exports.getCookie = getCookie;\r\n  exports.getCookies = getCookies;\r\n  exports.endsWith = endsWith;\r\n  exports.inject = inject;\r\n  exports.isJSONString = isJSONString;\r\n  exports.xhr = xhr;\r\n  exports.buildArgumentList = buildArgumentList;\r\n  exports.bindFunctionCallbacks = bindFunctionCallbacks;\r\n  exports.extend = extend;\r\n  exports.throttle = throttle;\r\n  exports.clone = clone;\r\n  exports.removeDuplicates = removeDuplicates;\r\n  exports.escapeRegExp = escapeRegExp;\r\n  exports.toBlob = toBlob;\r\n  exports.createObjectURL = createObjectURL;\r\n  exports.revokeObjectURL = revokeObjectURL;\r\n  exports.getRandomArbitrary = getRandomArbitrary;\r\n  exports.getRandomInt = getRandomInt;\r\n  exports.generateToken = generateToken;\r\n  exports.escapeECMAVariable = escapeECMAVariable;\r\n  exports.indexOfArray = indexOfArray;\r\n  exports.getKeys = getKeys;\r\n  exports.setProperty = setProperty;\r\n  exports.defineProperty = defineProperty;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/utils.js");

eval("define(\'storage/localStorage\',[\"utils\"], function(utils){\r\n  function getItem(key, callback, preferSync) {\r\n    var item = localStorage.getItem(key);\r\n    if (preferSync) {\r\n      callback(item);\r\n    } else {\r\n      utils.asyncCall(null, callback, item);\r\n    }\r\n  }\r\n  \r\n  return {\r\n    setItem: utils.bind(localStorage, localStorage.setItem),\r\n    getItem: getItem,\r\n    removeItem: utils.bind(localStorage, localStorage.removeItem)\r\n  };\r\n});\n//# sourceURL=/storage/localStorage.js");

eval("define(\'storage/cookies\',[\"utils\"], function(utils){\r\n  function setItem(key, value) {\r\n    utils.setCookie(prefix + key, value, null, \"/\", 1000*24*60*60*1000);\r\n  }\r\n  \r\n  function getItem(key, callback, preferSync) {\r\n    var item = utils.getCookie(prefix + key);\r\n    if (preferSync) {\r\n      callback(item);\r\n    } else {\r\n      utils.asyncCall(null, callback, item);\r\n    }\r\n  }\r\n  \r\n  function removeItem(key) {\r\n    utils.setCookie(prefix + key, \"\", null, \"/\", 0);\r\n  }\r\n  \r\n  var prefix = \"ytcenter.\";\r\n  \r\n  return {\r\n    setItem: setItem,\r\n    getItem: getItem,\r\n    removeItem: removeItem\r\n  };\r\n});\n//# sourceURL=/storage/cookies.js");

eval("define(\'console\',[\"exports\", \"utils\"], function(exports, utils){\r\n  function setEnabled(b) {\r\n    enabled = b;\r\n  }\r\n  \r\n  function log() {\r\n    if (!enabled) return function(){};\r\n    return console.log.bind(console, \"userscript[\" + sessionToken + \"]\");\r\n  }\r\n  \r\n  function error() {\r\n    if (!enabled) return function(){};\r\n    return console.error.bind(console, \"userscript[\" + sessionToken + \"]\");\r\n  }\r\n  \r\n  function warn() {\r\n    if (!enabled) return function(){};\r\n    return console.warn.bind(console, \"userscript[\" + sessionToken + \"]\");\r\n  }\r\n  \r\n  function debug() {\r\n    if (!enabled) return function(){};\r\n    return console.debug.bind(console, \"userscript[\" + sessionToken + \"]\");\r\n  }\r\n  \r\n  var sessionToken = (typeof consoleSessionToken === \"string\" ? consoleSessionToken : utils.generateToken(null, 8));\r\n  \r\n  var enabled = true;\r\n  \r\n  exports.sessionToken = sessionToken;\r\n  \r\n  utils.defineLockedProperty(exports, \"log\", function(){}, log);\r\n  utils.defineLockedProperty(exports, \"error\", function(){}, error);\r\n  utils.defineLockedProperty(exports, \"warn\", function(){}, warn);\r\n  utils.defineLockedProperty(exports, \"debug\", function(){}, debug);\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/console.js");

eval("define(\'storage/browser\',[\"../helper/support\", \"./localStorage\", \"./cookies\", \"console\"], function(support, localStorage, cookies){\r\n  if (support.localStorage) {\r\n    return localStorage;\r\n  } else {\r\n    return cookies;\r\n  }\r\n});\n//# sourceURL=/storage/browser.js");

eval("define(\'storage/userscript\',[\"../helper/support\", \"./browser\", \"../utils\"], function(support, browser, utils){\r\n  function setItem(key, value) {\r\n    GM_setValue(key, value);\r\n  }\r\n  \r\n  function getItem(key, callback, preferSync) {\r\n    var item = GM_getValue(key);\r\n    if (preferSync) {\r\n      callback(item);\r\n    } else {\r\n      utils.asyncCall(null, callback, item);\r\n    }\r\n  }\r\n  \r\n  function removeItem(key) {\r\n    GM_deleteValue(key);\r\n  }\r\n  \r\n  if (support.Greasemonkey) {\r\n    return {\r\n      setItem: setItem,\r\n      removeItem: removeItem,\r\n      getItem: getItem\r\n    };\r\n  } else {\r\n    return browser;\r\n  }\r\n});\n//# sourceURL=/storage/userscript.js");

eval("define(\'storage\',[\"exports\", \"storage/userscript\", \"utils\"], function(exports, storageHandler, utils){\r\n  function setItem(key, value) {\r\n    cache[key] = value;\r\n    storageHandler.setItem(key, value);\r\n  }\r\n  \r\n  function removeItem(key) {\r\n    delete cache[key];\r\n    storageHandler.removeItem(key);\r\n  }\r\n  \r\n  function getItemCallback(callback, key, value) {\r\n    cache[key] = value;\r\n    callback(cache[key]);\r\n  }\r\n  \r\n  function getItem(key, callback, sync) {\r\n    if (!(key in cache)) {\r\n      storageHandler.getItem(key, utils.bind(null, getItemCallback, callback, key));\r\n    } else {\r\n      if (sync) {\r\n        callback(cache[key]);\r\n        return cache[key];\r\n      } else {\r\n        utils.asyncCall(null, callback, cache[key]);\r\n      }\r\n    }\r\n  }\r\n  \r\n  var cache = {};\r\n  \r\n  /* Exports */\r\n  exports.setItem = setItem;\r\n  exports.removeItem = removeItem;\r\n  exports.getItem = getItem;\r\n  \r\n  return exports;\r\n});\n//# sourceURL=/storage.js");

eval("define(\'UserProxy/CustomEvent\',[\"utils\"], function(utils){\r\n  function addEventListener(event, listener) {\r\n    if (!events[event]) {\r\n      // Creating the array of listeners for event\r\n      events[event] = [];\r\n      \r\n      docListeners[event] = utils.bind(null, eventListener, event, events[event]);\r\n      \r\n      // Adding the event listener.\r\n      window.addEventListener(event, docListeners[event], false);\r\n    }\r\n    \r\n    // Adding listener to array.\r\n    events[event].push(listener);\r\n  }\r\n  \r\n  function removeEventListener(event, listener) {\r\n    if (event in events) {\r\n      for (var i = 0, len = events[event].length; i < len; i++) {\r\n        if (events[event][i] === listener) {\r\n          events[event].splice(i, 1);\r\n          i--; len--;\r\n        }\r\n      }\r\n      if (events[event].length === 0) {\r\n        window.removeEventListener(event, docListeners[event], false);\r\n        \r\n        events[event] = null;\r\n        docListeners[event] = null;\r\n      }\r\n    }\r\n  }\r\n  \r\n  function eventListener(event, listeners, e) {\r\n    e = e || window.event;\r\n    \r\n    // Parse the detail to the original object.\r\n    var data = JSON.parse(e.detail);\r\n    \r\n    if (typeof data.detail === \"object\" && data.token !== token) {\r\n      var detail = data.detail;\r\n      for (var i = 0, len = listeners.length; i < len; i++) {\r\n        // Call the listener with the event name and the parsed detail.\r\n        listeners[i](detail);\r\n      }\r\n      \r\n      // Prevent propagation\r\n      if (e && typeof e.stopPropagation === \"function\") {\r\n        e.stopPropagation();\r\n      }\r\n    }\r\n  }\r\n  \r\n  function fireEvent(event, detail) {\r\n    // Creating the event\r\n    var e = document.createEvent(\"CustomEvent\");\r\n    e.initCustomEvent(event, true, true, JSON.stringify({ detail: detail, token: token }));\r\n    \r\n    // Firing the event\r\n    document.documentElement.dispatchEvent(e);\r\n  }\r\n  \r\n  var token = utils.generateToken(); // The token is used to identify itself and prevent calling its own listeners.\r\n  var events = {};\r\n  var docListeners = {};\r\n  \r\n  return {\r\n    addEventListener: addEventListener,\r\n    removeEventListener: removeEventListener,\r\n    fireEvent: fireEvent\r\n  };\r\n});\n//# sourceURL=/UserProxy/CustomEvent.js");

eval("define(\'UserProxy/Message\',[\"utils\"], function(utils){\r\n  function addEventListener(event, listener) {\r\n    initMessage(); // Init the message event listener if not already initialized.\r\n    \r\n    if (!events[event]) events[event] = [];\r\n    \r\n    // Bind the event name to the listener as an argument.\r\n    var boundListener = utils.bind(null, listener, event);\r\n    \r\n    // Add the boundListener to the event\r\n    events[event].push(boundListener);\r\n  }\r\n  \r\n  function fireEvent(event, detail) {\r\n    window.postMessage(JSON.stringify({ token: token, event: event, detail: detail }), \"*\");\r\n  }\r\n  \r\n  function messageListener(e) {\r\n    e = e || window.event;\r\n    \r\n    // Parse the detail to the original object.\r\n    var data = JSON.parse(e.data);\r\n    \r\n    // Verify that the retrieved information is correct and that it didn\'t call itself.\r\n    if (typeof data.event === \"string\" && typeof data.detail === \"object\" && data.token !== token) {\r\n      \r\n      // Iterate through every listener for data.event.\r\n      if (utils.isArray(events[data.event])) {\r\n        var listeners = events[data.event];\r\n        \r\n        var detail = data.detail;\r\n        for (var i = 0, len = listeners.length; i < len; i++) {\r\n          listeners(detail);\r\n        }\r\n    \r\n        // Prevent propagation only if everything went well.\r\n        if (e && typeof e.stopPropagation === \"function\") {\r\n          e.stopPropagation();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  function initMessage() {\r\n    if (!messageEventAdded) {\r\n      // Adding the message event listener.\r\n      window.addEventListener(\"message\", messageListener, false);\r\n    }\r\n  }\r\n  \r\n  var messageEventAdded = false;\r\n  var token = utils.generateToken(); // The token is used to identify itself and prevent calling its own listeners.\r\n  \r\n  var events = {};\r\n  \r\n  return {\r\n    addEventListener: addEventListener,\r\n    fireEvent: fireEvent\r\n  };\r\n});\n//# sourceURL=/UserProxy/Message.js");

eval("define(\'UserProxy/support\',[], function(){\r\n  function customEvent() {\r\n    try {\r\n      var e = document.createEvent(\'CustomEvent\');\r\n      if (e && typeof e.initCustomEvent === \"function\") {\r\n        e.initCustomEvent(mod, true, true, { mod: mod });\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  var mod = \"support.test\";\r\n  \r\n  return {\r\n    CustomEvent: customEvent\r\n  };\r\n});\n//# sourceURL=/UserProxy/support.js");

eval("define(\'UserProxy/memFunction\',[\"utils\", \"./CustomEvent\", \"./Message\", \"./support\"], function(utils, customEvent, message, support){\r\n  function parseObject(obj, token, type) {\r\n    if (typeof obj === \"object\") {\r\n      utils.each(obj, function(key, value){\r\n        if (typeof value === \"object\") {\r\n          obj[key] = parseObject(value, token, type);\r\n        } else if (typeof value === \"string\") {\r\n          obj[key] = parseString(value);\r\n        } else if (typeof value === \"function\") {\r\n          var id = cache.push(value) - 1;\r\n          obj[key] = \"${\" + token + \"/\" + type + \"/\" + id + \"}\";\r\n        }\r\n      });\r\n    } else if (typeof value === \"string\") {\r\n      obj = parseString(obj);\r\n    } else if (typeof obj === \"function\") {\r\n      var id = cache.push(obj) - 1;\r\n      obj = \"${\" + token + \"/\" + type + \"/\" + id + \"}\";\r\n    }\r\n    return obj;\r\n  }\r\n  \r\n  function parseString(str) {\r\n    if (/^\\$[\\\\]*\\{([0-9a-zA-Z\\.\\-_\\/\\\\]+)\\}$/g.test(str)) {\r\n      return \"$\\\\\" + str.substring(1);\r\n    }\r\n    return str;\r\n  }\r\n  \r\n  function restoreString(str, token, type) {\r\n    if (/^\\$\\{([0-9a-zA-Z\\.\\-_]+)\\/([0-9a-zA-Z\\.\\-_]+)\\/([0-9]+)\\}$/g.test(str)) {\r\n      var parsed = str.substring(2, str.length - 1).split(\"/\"); // \" + token + \"/\" + type + \"/\" + id + \"\r\n      var id = parseInt(parsed[2], 10);\r\n      if (parsed[0] === token && parsed[1] === type) {\r\n        return cache[id];\r\n      } else {\r\n        return utils.bind(null, functionPlaceholder, parsed[0] + \"-\" + parsed[1], id);\r\n      }\r\n    } else if (/^\\$[\\\\]+\\{([0-9a-zA-Z\\.\\-_\\/\\\\]+)\\}$/g.test(str)) {\r\n      return \"$\" + str.substring(2);\r\n    }\r\n    return str;\r\n  }\r\n  \r\n  function restoreObject(obj, token, type) {\r\n    if (typeof obj === \"object\") {\r\n      utils.each(obj, function(key, value){\r\n        if (typeof value === \"object\") {\r\n          obj[key] = restoreObject(value, token, type);\r\n        } else if (typeof value === \"string\") {\r\n          obj[key] = restoreString(value, token, type);\r\n        } else if (typeof value === \"function\") {\r\n          throw Error(\"Function was found!\");\r\n        }\r\n      });\r\n    } else if (typeof value === \"string\") {\r\n      return restoreString(value, token, type);\r\n    } else if (typeof value === \"function\") {\r\n      throw Error(\"Function was found!\");\r\n    }\r\n    return obj;\r\n  }\r\n  \r\n  function functionPlaceholder(event, id) {\r\n    var args = Array.prototype.slice.call(arguments, 2);\r\n    if (support.CustomEvent) {\r\n      return customEvent.fireEvent(event, { callbackId: id, args: args, mem: true });\r\n    } else {\r\n      return message.fireEvent(event, { callbackId: id, args: args, mem: true });\r\n    }\r\n  }\r\n  \r\n  function getCacheFunction(id) {\r\n    return cache[id];\r\n  }\r\n  \r\n  var cache = [];\r\n  \r\n  return {\r\n    parseObject: parseObject,\r\n    restoreObject: restoreObject,\r\n    getCacheFunction: getCacheFunction\r\n  };\r\n});\n//# sourceURL=/UserProxy/memFunction.js");

eval("define(\'UserProxy/Connection\',[\"./CustomEvent\", \"./Message\", \"utils\", \"./support\", \"./memFunction\"], function(customEvent, message, utils, support, mem){\r\n  function listenerProxy(functions, token, type, detail) {\r\n    setTimeout(utils.bind(null, listener, functions, token, type, detail), 4);\r\n  }\r\n  \r\n  function listener(functions, token, type, detail) {\r\n    var keys = utils.getKeys(functions);\r\n    var index = utils.indexOfArray(detail.method, keys);\r\n    if (index > -1) {\r\n      var result = functions[keys[index]].apply(null, mem.restoreObject(detail.args, token, type));\r\n      if (typeof detail.id === \"number\") {\r\n        var memResult = mem.parseObject(result, token, type);\r\n        var detail = { callbackId: detail.id, args: [ memResult ] };\r\n        if (support.CustomEvent) {\r\n          customEvent.fireEvent(token + \"-page\", detail);\r\n        } else {\r\n          message.addEventListener(token + \"-page\", detail);\r\n        }\r\n      }\r\n    } else {\r\n      throw \"Method \" + detail.method + \" has not been set!\";\r\n    }\r\n  }\r\n  \r\n  function Connection(pageProxy) {\r\n    this.token = utils.generateToken();\r\n    this.functions = {};\r\n    this.namespace = \"UserProxy\";\r\n    this.pageProxy = pageProxy;\r\n  }\r\n  \r\n  Connection.prototype.setFunctions = function setFunctions(functions) {\r\n    this.functions = functions;\r\n  }\r\n  \r\n  Connection.prototype.setNamespace = function setFunctions(namespace) {\r\n    this.namespace = namespace;\r\n  }\r\n  \r\n  Connection.prototype.inject = function inject(code) {\r\n    var parent = (document.body || document.head || document.documentElement);\r\n    if (!parent) throw \"Parent was not found!\";\r\n    \r\n    var script = document.createElement(\"script\")\r\n    script.setAttribute(\"type\", \"text/javascript\");\r\n\r\n    this.connect();\r\n    \r\n    var args = [ false, this.token, utils.getKeys(this.functions) ];\r\n    args = args.concat(Array.prototype.slice.call(arguments, 1));\r\n    \r\n    var content = \"(\" + code + \")(\" + utils.buildArgumentList.apply(null, args) + \");\";\r\n    \r\n    script.appendChild(document.createTextNode(content));\r\n    \r\n    parent.appendChild(script);\r\n    parent.removeChild(script);\r\n  }\r\n  \r\n  Connection.prototype.connect = function connect() {\r\n    if (this.establishedConnectionListener) this.disconnect();\r\n    \r\n    this.establishedConnectionListener = utils.bind(null, listenerProxy, this.functions, this.token, \"content\");\r\n    if (support.CustomEvent) {\r\n      customEvent.addEventListener(this.token + \"-content\", this.establishedConnectionListener);\r\n    } else {\r\n      message.addEventListener(this.token + \"-content\", this.establishedConnectionListener);\r\n    }\r\n  }\r\n  \r\n  Connection.prototype.disconnect = function connect() {\r\n    if (!this.establishedConnectionListener) return;\r\n    if (support.CustomEvent) {\r\n      customEvent.removeEventListener(this.token + \"-content\", this.establishedConnectionListener);\r\n    } else {\r\n      message.removeEventListener(this.token + \"-content\", this.establishedConnectionListener);\r\n    }\r\n    this.establishedConnectionListener = null;\r\n  }\r\n  \r\n  return Connection;\r\n});\n//# sourceURL=/UserProxy/Connection.js");

eval("define(\'extensions-connection/userscript\',[], function(){\r\n  function empty() { }\r\n  return {\r\n    setPageConnection: empty\r\n  };\r\n});\n//# sourceURL=/extensions-connection/userscript.js");

eval("define(\'xhr/browser\',[], function(){\r\n  function xhr(details) {\r\n    var xmlhttp;\r\n    if (typeof XMLHttpRequest != \"undefined\") {\r\n      xmlhttp = new XMLHttpRequest();\r\n    } else {\r\n      details[\"onerror\"](responseState);\r\n    }\r\n    xmlhttp.onreadystatechange = function(){\r\n      var responseState = {\r\n        responseXML: \'\',\r\n        responseText: (xmlhttp.readyState == 4 ? xmlhttp.responseText : \'\'),\r\n        readyState: xmlhttp.readyState,\r\n        responseHeaders: (xmlhttp.readyState == 4 ? xmlhttp.getAllResponseHeaders() : \'\'),\r\n        status: (xmlhttp.readyState == 4 ? xmlhttp.status : 0),\r\n        statusText: (xmlhttp.readyState == 4 ? xmlhttp.statusText : \'\'),\r\n        finalUrl: (xmlhttp.readyState == 4 ? xmlhttp.finalUrl : \'\')\r\n      };\r\n      if (details[\"onreadystatechange\"]) {\r\n        details[\"onreadystatechange\"](responseState);\r\n      }\r\n      if (xmlhttp.readyState == 4) {\r\n        if (details[\"onload\"] && xmlhttp.status >= 200 && xmlhttp.status < 300) {\r\n          details[\"onload\"](responseState);\r\n        }\r\n        if (details[\"onerror\"] && (xmlhttp.status < 200 || xmlhttp.status >= 300)) {\r\n          details[\"onerror\"](responseState);\r\n        }\r\n      }\r\n    };\r\n    try {\r\n      xmlhttp.open(details.method, details.url);\r\n    } catch(e) {\r\n      details[\"onerror\"]();\r\n    }\r\n    if (details.headers) {\r\n      for (var prop in details.headers) {\r\n        xmlhttp.setRequestHeader(prop, details.headers[prop]);\r\n      }\r\n    }\r\n    xmlhttp.send((typeof(details.data) !== \'undefined\') ? details.data : null);\r\n  }\r\n  \r\n  return xhr;\r\n});\n//# sourceURL=/xhr/browser.js");

eval("define(\'xhr/userscript\',[\"../helper/support\", \"./browser\"], function(support, browser){\r\n  if (support.Greasemonkey) {\r\n    return GM_xmlhttpRequest;\r\n  } else {\r\n    return browser;\r\n  }\r\n});\n//# sourceURL=/xhr/userscript.js");

eval("define(\'xhr\',[\"xhr/userscript\"], function(xhr){\r\n  return xhr;\r\n});\n//# sourceURL=/xhr.js");

eval("define(\'main-wrapper\',[\"storage\", \"UserProxy/Connection\", \"extensions-connection/userscript\", \"xhr\", \"console\"], function(storage, Connection, extension, xhr, con){\r\n  var functionMap = {\r\n    \"setItem\": storage.setItem,\r\n    \"getItem\": storage.getItem,\r\n    \"removeItem\": storage.removeItem,\r\n    \"xhr\": xhr,\r\n    \"log\": con.log\r\n  };\r\n  \r\n  var connection = null;\r\n  \r\n  storage.getItem(\"YouTubeCenterSettings\", function(settings){\r\n    if (typeof settings !== \"object\") settings = JSON.parse(settings || \"{}\");\r\n    \r\n    connection = new Connection();\r\n    connection.setFunctions(functionMap);\r\n    \r\n    extension.setPageConnection(connection);\r\n    \r\n    connection.inject(mainPage, settings, con.sessionToken);\r\n  }, true);\r\n});\n//# sourceURL=/main-wrapper.js");


require(["main-wrapper"]);
}());
//# sourceMappingURL=data:application/json;base64,
})();